#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТранзакцииКоличествоПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Транзакции.ТекущаяСтрока;
	КоличествоПриИзмененииНаСервере(ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ТранзакцииЦенаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Транзакции.ТекущаяСтрока;
	ЦенаПриИзмененииНаСервере(ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ТранзакцииКартаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Транзакции.ТекущаяСтрока;
	КартаПриИзмененииНаСервере(ТекущаяСтрока);
КонецПроцедуры


&НаКлиенте
Процедура ТранзакцииНадбавкаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Транзакции.ТекущаяСтрока;
	НадбавкаПриИзмененииНаСервере(ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ТранзакцииВалютаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Транзакции.ТекущаяСтрока;
	ВалютаПриИзмененииНаСервере(ТекущаяСтрока);
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура Очистить(Команда)
	Объект.Транзакции.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура Пересчет(Команда)
	ПересчетВсегоДокументаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	Записать();
		
	СтруктураПечати = ПолучитьСтруктуруПечати();
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("СтруктураПечати", СтруктураПечати);
	
	ОткрытьФорму("Документ.Фактура.Форма.ПечатьФактур", СтруктураПараметров);	
КонецПроцедуры

// Получить структуру печати.
// 
// Возвращаемое значение:
//  Структура - Получить структуру печати:
// * Клиенты - Массив -
// * Строки - Массив из См. ШаблонСтруктурыСтроки()
&НаСервере
Функция ПолучитьСтруктуруПечати()	
	ТаблицаКлиенты = Объект.Транзакции.Выгрузить();
	ТаблицаКлиенты.Свернуть("Клиент, ЭтапОплаты");
	
	СтруктураПечати = Новый Структура;
	СтруктураПечати.Вставить("Клиенты", Новый Массив);
	СтруктураПечати.Вставить("Строки", Новый Массив);
	
	Для Каждого СтрокаТаблицы Из ТаблицаКлиенты Цикл
		СтруктураСтроки = Новый Структура("Клиент, ЭтапОплаты, Фактура");
		СтруктураСтроки.Клиент = СтрокаТаблицы.Клиент;
		СтруктураСтроки.ЭтапОплаты = СтрокаТаблицы.ЭтапОплаты;
		СтруктураСтроки.Фактура = Объект.Ссылка;
		
		СтруктураПечати.Клиенты.Добавить(СтруктураСтроки);
	КонецЦикла;	
	
	Для Каждого СтрокаТЧ Из Объект.Транзакции Цикл
		СтруктураСтрокиТранзакция = ШаблонСтруктурыСтроки();
		ЗаполнитьЗначенияСвойств(СтруктураСтрокиТранзакция, СтрокаТЧ);
		
		СтруктураПечати.Строки.Добавить(СтруктураСтрокиТранзакция);
	КонецЦикла;	
	
	Возврат СтруктураПечати;
КонецФункции

// Шаблон структуры строки.
// 
// Возвращаемое значение:
//  Структура - Шаблон структуры строки:
// * ДатаТранзакции - Дата - 
// * Карта - СправочникСсылка.Карточки - 
// * Клиент - СправочникСсылка.Контрагенты - 
// * Автомобиль - СправочникСсылка.Автомобили - 
// * МестоТранзакции - СправочникСсылка.МестаТранзакции - 
// * Продукт - СправочникСсылка.Номенклатура - 
// * Количество - Число - 
// * Цена - Число - 
// * Сумма - Число - 
// * Итого - Число - 
// * СуммаСкидки - Число - 
&НаСервере
Функция ШаблонСтруктурыСтроки()
	Структура = Новый Структура;
	Структура.Вставить("ДатаТранзакции", Дата(1, 1, 1));
	Структура.Вставить("Карта", Справочники.Карточки.ПустаяСсылка());
	Структура.Вставить("Клиент", Справочники.Контрагенты.ПустаяСсылка());
	Структура.Вставить("Автомобиль", Справочники.Автомобили.ПустаяСсылка());
	Структура.Вставить("МестоТранзакции", Справочники.МестаТранзакции.ПустаяСсылка());
	Структура.Вставить("Продукт", Справочники.Номенклатура.ПустаяСсылка());
	Структура.Вставить("Количество", 0);
	Структура.Вставить("Цена", 0);
	Структура.Вставить("Сумма", 0);
	Структура.Вставить("Итого", 0);
	Структура.Вставить("СуммаСкидки", 0);
	
	Возврат Структура;
КонецФункции	

#КонецОбласти

#Область Пересчеты

&НаСервере
Процедура КоличествоПриИзмененииНаСервере(ИдентификаторСтроки)
	ТекущаяСтрока = Объект.Транзакции.НайтиПоИдентификатору(ИдентификаторСтроки);
	ПересчетНаСервере(ТекущаяСтрока, "Количество");	
КонецПроцедуры

&НаСервере
Процедура ЦенаПриИзмененииНаСервере(ИдентификаторСтроки)
	ТекущаяСтрока = Объект.Транзакции.НайтиПоИдентификатору(ИдентификаторСтроки);
	ПересчетНаСервере(ТекущаяСтрока, "Цена");	
КонецПроцедуры

&НаСервере
Процедура КартаПриИзмененииНаСервере(ИдентификаторСтроки)
	ТекущаяСтрока = Объект.Транзакции.НайтиПоИдентификатору(ИдентификаторСтроки);
	ПересчетНаСервере(ТекущаяСтрока, "Карта");
КонецПроцедуры

&НаСервере
Процедура НадбавкаПриИзмененииНаСервере(ИдентификаторСтроки)
	ТекущаяСтрока = Объект.Транзакции.НайтиПоИдентификатору(ИдентификаторСтроки);
	ПересчетНаСервере(ТекущаяСтрока, "Надбавка");
КонецПроцедуры

&НаСервере
Процедура ВалютаПриИзмененииНаСервере(ИдентификаторСтроки)
	ТекущаяСтрока = Объект.Транзакции.НайтиПоИдентификатору(ИдентификаторСтроки);
	ПересчетНаСервере(ТекущаяСтрока, "Валюта");
КонецПроцедуры

&НаСервере
Процедура ПересчетВсегоДокументаНаСервере()
	Для Каждого СтрокаТЧ Из Объект.Транзакции Цикл
		ПересчетНаСервере(СтрокаТЧ, "Все");
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ПересчетНаСервере(СтрокаТЧ, ИсточникПересчета)
	СтруктураНастроек = Справочники.Настройки.ПолучитьНастройки();
	Если ИсточникПересчета = "Количество" Или ИсточникПересчета = "Цена" Тогда
		ПересчетСтрокиОтЦеныИКоличества(СтрокаТЧ, СтруктураНастроек);
	ИначеЕсли ИсточникПересчета = "Все" Тогда
		ПересчетСтрокиПолный(СтрокаТЧ, СтруктураНастроек);
	ИначеЕсли ИсточникПересчета = "Карта" Тогда
		ПересчетСтрокиОтКарты(СтрокаТЧ, СтруктураНастроек);
	ИначеЕсли ИсточникПересчета = "Надбавка" Тогда
		ПересчетСтрокиОтНадбавки(СтрокаТЧ, СтруктураНастроек);
	ИначеЕсли ИсточникПересчета = "Валюта" Тогда
		ПересчетСтрокиОтВалюты(СтрокаТЧ, СтруктураНастроек);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПересчетСтрокиОтКарты(СтрокаТЧ, СтруктураНастроек)
		СтрокаТЧ.Автомобиль = ПолучитьАвтомобильПоКарточке(СтрокаТЧ.Карта, СтрокаТЧ.ДатаТранзакции);
		//Установим такую же надбавку, как у такого же клиента в предыдущих строках
		СтрокаТЧ.Клиент     = СтрокаТЧ.Карта.Владелец;
		ТекущаяНадбавка = СтрокаТЧ.Надбавка;
		
		МассивПоиска = Объект.Транзакции.НайтиСтроки(Новый Структура("Клиент", СтрокаТЧ.Клиент));
		Для Каждого ЭлементМассива Из МассивПоиска Цикл
			ЭлементМассива.Надбавка = ТекущаяНадбавка;
		КонецЦикла;	
		
		СтрокаТЧ.Скидка = ОпределитьСкидкуКлиента(СтрокаТЧ.Клиент, СтрокаТЧ.МестоТранзакции, СтрокаТЧ.ДатаТранзакции);
		
		Если (СтрокаТЧ.Цена+СтрокаТЧ.Количество) <> 0 Тогда
			СтруктураНастроек = Справочники.Настройки.ПолучитьНастройки();
			ПересчетСтрокиОтЦеныИКоличества(СтрокаТЧ, СтруктураНастроек);			
		КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПересчетСтрокиОтНадбавки(СтрокаТЧ, СтруктураНастроек)
	Если Не Объект.флагСчитатьСкидкуОтМестаТранзакции Тогда
		МассивСтрок = Объект.Транзакции.НайтиСтроки(Новый Структура("Клиент", СтрокаТЧ.Клиент));
		Для Каждого ЭлементМассива Из МассивСтрок Цикл
			ЭлементМассива.Надбавка = СтрокаТЧ.Надбавка;
			ПересчетСтрокиОтЦеныИКоличества(ЭлементМассива, СтруктураНастроек);
		КонецЦикла;				
	Иначе   
		ТекущийКонтрагент = СтрокаТЧ.Клиент;
		ТекущаяЗаправка = СтрокаТЧ.МестоТранзакции;
		ТекущаяНадбавка = СтрокаТЧ.Надбавка;
				
		Для Каждого СтрокаТЧТекущая Из Объект.Транзакции Цикл
			Если ТекущийКонтрагент = СтрокаТЧ.Клиент И
				ТекущаяЗаправка.Родитель = СтрокаТЧТекущая.МестоТранзакции.Родитель Тогда
					СтрокаТЧТекущая.Надбавка= ТекущаяНадбавка;
					ПересчетСтрокиОтЦеныИКоличества(СтрокаТЧТекущая, СтруктураНастроек);
			КонецЕсли;						 						
		КонецЦикла;		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПересчетСтрокиОтВалюты(СтрокаТЧ, СтруктураНастроек)
	ТекущийКонтрагент = СтрокаТЧ.Клиент;
	ТекущаяВалюта = СтрокаТЧ.Валюта;
	Если Не Объект.флагСчитатьСкидкуОтМестаТранзакции Тогда
		МассивСтрок = Объект.Транзакции.НайтиСтроки(Новый Структура("Клиент", ТекущийКонтрагент));
		Для Каждого ЭлементМассива Из МассивСтрок Цикл
			ЭлементМассива.Валюта = ТекущаяВалюта;
			ПересчетСтрокиОтЦеныИКоличества(ЭлементМассива, СтруктураНастроек);
		КонецЦикла;
	Иначе
		Заправка = СтрокаТЧ.МестоТранзакции;
		Для Каждого ТекущаяСтрока Из Объект.Транзакции Цикл
			Если ТекущийКонтрагент = ТекущаяСтрока.Клиент И Заправка.Родитель = ТекущаяСтрока.МестоТранзакции.Родитель Тогда
				СтрокаТЧ.Валюта = ТекущаяВалюта;
				ПересчетСтрокиОтЦеныИКоличества(ТекущаяСтрока, СтруктураНастроек);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры		

&НаСервере
Процедура ПересчетСтрокиПолный(СтрокаТЧ, СтруктураНастроек)
	Если СтрокаТЧ.ЭтапОплаты <> 0 Тогда
			Возврат;
	КонецЕсли;	
	Скидка = ОпределитьСкидкуКлиента(СтрокаТЧ.Клиент, СтрокаТЧ.МестоТранзакции, СтрокаТЧ.ДатаТранзакции);
	СтруктураКурса = Справочники.Валюты.ПолучитьСруктуруКурса(СтрокаТЧ.Валюта, СтрокаТЧ.ДатаТранзакции);
	Если СтруктураКурса.Курс = 0 Тогда
		Возврат;
	КонецЕсли;	
	ПересчетСтрокиОтЦеныИКоличества(СтрокаТЧ, СтруктураНастроек);	
КонецПроцедуры

// Получить автомобиль по карточке.
// 
// Параметры:
//  Карточка - СправочникСсылка.Карточки
//  ДатаЗапроса - Дата
// 
// Возвращаемое значение:
//  Структура - Получить автомобиль по карточке:
// * Автомобиль - СправочникСсылка.Автомобили - 
// * АвтомобильСтрока - Строка - 
Функция ПолучитьАвтомобильПоКарточке(Карточка, ДатаЗапроса)
	Структура = Новый Структура;
	Структура.Вставить("Автомобиль", Справочники.Автомобили.ПустаяСсылка());
	Структура.Вставить("АвтомобильСтрока", "");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаЗапроса", ДатаЗапроса);
	Запрос.УстановитьПараметр("КарточкаСсылка", Карточка);
	Запрос.Текст = "ВЫБРАТЬ
	|	АвтомобилиКарточекСрезПоследних.Автомобиль,
	|	АвтомобилиКарточекСрезПоследних.АвтомобильСтрока
	|ИЗ
	|	РегистрСведений.АвтомобилиКарточек.СрезПоследних(&ДатаЗапроса, Карточка = &КарточкаСсылка) КАК
	|		АвтомобилиКарточекСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Структура.Автомобиль = Выборка.Автомобиль;
		Структура.АвтомобильСтрока = Выборка.АвтомобильСтрока;
	КонецЕсли;	 
	
	Возврат Структура;
КонецФункции	

&НаСервере
Функция ОпределитьСкидкуКлиента(Контрагент, МестоТранзакции, ДатаТранзакции)
	СкидкаНаЗаправке = 0;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("МестоТранзакции", МестоТранзакции);
	Запрос.УстановитьПараметр("ДатаЗапроса", Объект.Дата);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УсловияСкидокНаЗаправкахИсторияСрезПоследних.Скидка КАК ЗначениеСкидки
	|ИЗ
	|	РегистрСведений.УсловияСкидокНаЗаправкахИстория.СрезПоследних(&ДатаЗапроса, УсловияСкидок.Владелец = &МестоТранзакции
	|	И УсловияСкидок.Контрагент = &Контрагент) КАК УсловияСкидокНаЗаправкахИсторияСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СкидкаНаЗаправке = Выборка.ЗначениеСкидки;
	КонецЕсли;
	
	СкидкаНаКлиенте = 0;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПериодЗапроса", ДатаТранзакции);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СкидкиКонтрагентовСрезПоследних.Скидка КАК ВидСкидки
	|ИЗ
	|	РегистрСведений.СкидкиКонтрагентов.СрезПоследних(&ПериодЗапроса, Контрагент = &Контрагент) КАК
	|		СкидкиКонтрагентовСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СкидкаНаКлиенте = ПолучитьЗначениеСкидкиПоВидуСкидки(Выборка.ВидСкидки, ДатаТранзакции);	
	КонецЕсли;
	
	СкидкаНаГруппеЗаправок = ПолучитьЗначениеСкидкиНаЗаправке(МестоТранзакции.Родитель, ДатаТранзакции);
	
	Если ПолучитьФлагНеИспользоватьОсобыеУсловияПоКонтрагенту(Контрагент, ДатаТранзакции) Тогда
		СкидкаНаЗаправке = 0;
	КонецЕсли;	
	Если СкидкаНаЗаправке <> 0 Тогда
		Возврат СкидкаНаЗаправке;
	Иначе
		Возврат Мин(СкидкаНаКлиенте,СкидкаНаГруппеЗаправок);
	КонецЕсли;
КонецФункции // ОпределитьСкидкуКлиента

// Получить флаг не использовать особые условия по контрагенту.
// 
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты
//  ДатаЗапроса - Дата
// 
// Возвращаемое значение:
//  Булево
&НаСервере
Функция ПолучитьФлагНеИспользоватьОсобыеУсловияПоКонтрагенту(Контрагент, ДатаЗапроса)
	ФлагНеИспользоватьОсобыеУсловия = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ДатаЗапроса", ДатаЗапроса);
	Запрос.Текст = "ВЫБРАТЬ
	|	ОсобыеУсловияКонтрагентовСрезПоследних.НеИспользоватьОсобыеУсловия
	|ИЗ
	|	РегистрСведений.ОсобыеУсловияКонтрагентов.СрезПоследних(&ДатаЗапроса, Контрагент = &Контрагент) КАК
	|		ОсобыеУсловияКонтрагентовСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ФлагНеИспользоватьОсобыеУсловия = Выборка.НеИспользоватьОсобыеУсловия;
	КонецЕсли;
	Возврат ФлагНеИспользоватьОсобыеУсловия;		
КонецФункции	

// Получить значение скидки на заправке.
// 
// Параметры:
//  МестоТранзакции - СправочникСсылка.МестаТранзакции;
//  ДатаЗапроса - Дата
// 
// Возвращаемое значение:
//  Число - Получить значение скидки на заправке
&НаСервере
Функция ПолучитьЗначениеСкидкиНаЗаправке(МестоТранзакции, ДатаЗапроса)
	ЗначениеСкидкиНаЗаправке = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МестоТранзакции", МестоТранзакции);
	Запрос.УстановитьПараметр("ДатаЗапроса", ДатаЗапроса);
	Запрос.Текст = "ВЫБРАТЬ
	|	СкидкиМестТранзакцийСрезПоследних.Скидка КАК ВидСкидки
	|ИЗ
	|	РегистрСведений.СкидкиМестТранзакций.СрезПоследних(&ДатаЗапроса, МестоТранзации = &МестоТранзакции) КАК
	|		СкидкиМестТранзакцийСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗначениеСкидкиНаЗаправке = ПолучитьЗначениеСкидкиПоВидуСкидки(Выборка.ВидСкидки, ДатаЗапроса);
	КонецЕсли;
	Возврат ЗначениеСкидкиНаЗаправке;	
	
КонецФункции	

//
// Получить значение скидки по виду скидки.
// 
// Параметры:
//  ВидСкидки - СправочникСсылка.Скидки
//  ДатаЗапроса - Дата
// 
// Возвращаемое значение:
//  Число
&НаСервере
Функция ПолучитьЗначениеСкидкиПоВидуСкидки(ВидСкидки, ДатаЗапроса)
	ЗначениеСкидки = 0;
	
	ЗапросСкидкаПоВидуСкидки = Новый Запрос;
	ЗапросСкидкаПоВидуСкидки.УстановитьПараметр("ДатаЗапроса", ДатаЗапроса);
	ЗапросСкидкаПоВидуСкидки.УстановитьПараметр("ВидСкидки", ВидСкидки);
	ЗапросСкидкаПоВидуСкидки.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияСкидокСрезПоследних.ЗначениеСкидки
	|ИЗ
	|	РегистрСведений.ЗначенияСкидок.СрезПоследних(&ДатаЗапроса, Скидка = &ВидСкидки) КАК ЗначенияСкидокСрезПоследних";
	Выборка = ЗапросСкидкаПоВидуСкидки.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗначениеСкидки = Выборка.ЗначениеСкидки; 
	КонецЕсли;
	Возврат ЗначениеСкидки;	
КонецФункции	

&НаСервере
Процедура ПересчетСтрокиОтЦеныИКоличества(СтрокаТЧ, СтруктураНастроек)
	Если СтрокаТЧ.ВалютаПоставщика <> СтруктураНастроек.BYN Тогда
		СтруктураКурса = Справочники.Валюты.ПолучитьСруктуруКурса(СтрокаТЧ.Валюта, СтрокаТЧ.ДатаТранзакции);
		СтрокаТЧ.ВалютнаяЦена = СтрокаТЧ.Цена / СтруктураКурса.Курс;
	Иначе
		СтруктураКурса = Справочники.Валюты.ПолучитьСруктуруКурса(СтрокаТЧ.ВалютаПоставщика, СтрокаТЧ.ДатаТранзакции);
		ШаблонСообщения = "Для валюты %1 %2 равен нулю";
		Если СтрокаТЧ.Валюта = СтруктураНастроек.EUR Тогда
			Если СтруктураКурса.КурсКЕвро <> 0 Тогда				
				СтрокаТЧ.ВалютнаяЦена = СтрокаТЧ.Цена / СтруктураКурса.КурсКЕвро;
			Иначе
				Сообщение = СтрШаблон(ШаблонСообщения, СтрокаТЧ.ВалютаПоставщика, "курс к евро");
				ОбщегоНазначения.СообщитьПользователю(Сообщение);
				Возврат;	
			КонецЕсли;		
		Иначе
			Если СтруктураКурса.КурсКДоллару <> 0 Тогда
				СтрокаТЧ.ВалютнаяЦена = СтрокаТЧ.Цена / СтруктураКурса.КурсКДоллару;
			Иначе
				Сообщение = СтрШаблон(ШаблонСообщения, СтрокаТЧ.ВалютаПоставщика, "курс к доллару");
				ОбщегоНазначения.СообщитьПользователю(Сообщение);
				Возврат;
			КонецЕсли;			
		КонецЕсли;	
	КонецЕсли;
	СтрокаТЧ.ВалютнаяЦенаСНадбавкой = СтрокаТЧ.ВалютнаяЦена + (СтрокаТЧ.ВалютнаяЦена * СтрокаТЧ.Надбавка / 100);
	СтрокаТЧ.Сумма           = СтрокаТЧ.ВалютнаяЦенаСНадбавкой  * СтрокаТЧ.Количество;	
	СтрокаТЧ.ЦенаСоСкидкой   = СтрокаТЧ.ВалютнаяЦенаСНадбавкой  * (100 -СтрокаТЧ.Скидка)/100;
	СтрокаТЧ.СуммаСкидки     = СтрокаТЧ.Сумма * СтрокаТЧ.СуммаСкидки / 100;
	СтрокаТЧ.Итого           = СтрокаТЧ.Сумма * (100 - СтрокаТЧ.Скидка) / 100;
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаНаСайт

&НаКлиенте
Процедура ВыгрузитьНаСайт(Команда)
	ВыгрузитьНаСайтНаСервере();
	ПоказатьПредупреждение(, "Выгрузка завершена");
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьНаСайтНаСервере()
	СтруктураНастроек = Справочники.Настройки.ПолучитьНастройки();
	Если ПустаяСтрока(СтруктураНастроек.ПутьДляВыгрузки) Тогда
		ОбщегоНазначения.СообщитьПользователю("Не указан общий путь выгрузки. См. справочник ""Настройки""");
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(СтруктураНастроек.ПутьДляВыгрузкиИнвойсов) Тогда
		ОбщегоНазначения.СообщитьПользователю("Не указан общий путь выгрузки инвойсов. См. справочник ""Настройки""");
		Возврат;
	КонецЕсли;	
	
	ТаблицаДанные = Объект.Транзакции.Выгрузить();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДанные", ТаблицаДанные);
	#Область ТекстЗапроса
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДанные.ДатаТранзакции,
	|	ТаблицаДанные.Карта,
	|	ТаблицаДанные.Автомобиль,
	|	ТаблицаДанные.Продукт,
	|	ТаблицаДанные.Количество,
	|	ТаблицаДанные.Цена,
	|	ТаблицаДанные.Сумма,
	|	ТаблицаДанные.Скидка,
	|	ТаблицаДанные.МестоТранзакции,
	|	ТаблицаДанные.Клиент
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	&ТаблицаДанные КАК ТаблицаДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Данные.ДатаТранзакции КАК ДатаТранзакции,
	|	ВТ_Данные.Карта,
	|	ВТ_Данные.Автомобиль,
	|	ВТ_Данные.Продукт КАК Продукт,
	|	ВТ_Данные.Количество,
	|	ВТ_Данные.Цена,
	|	ВТ_Данные.Сумма,
	|	ВТ_Данные.Скидка,
	|	ВТ_Данные.МестоТранзакции,
	|	ВТ_Данные.Клиент КАК Клиент,
	|	ЕСТЬNULL(Контрагенты.Логин, """") КАК Логин
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ВТ_Данные.Клиент = Контрагенты.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаТранзакции,
	|	Продукт
	|ИТОГИ
	|	МАКСИМУМ(Логин) КАК Логин
	|ПО
	|	Клиент";
	#КонецОбласти
	
	ВыборкаКонтрагент = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Клиент");
	Пока ВыборкаКонтрагент.Следующий() Цикл
		Если ПустаяСтрока(ВыборкаКонтрагент.Логин) Тогда
			Сообщение = СтрШаблон("Не указан логин для клиента: %1. Пропуск", ВыборкаКонтрагент.Клиент);
			Продолжить;
		КонецЕсли;	
		ТаблицаВыгрузки = ТаблицаДляВыгрузкиКонтрагента();
		Выборка = ВыборкаКонтрагент.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ТаблицаВыгрузки.Добавить();
			НоваяСтрока.DATE = Формат(Выборка.ДатаТранзакции, "ДФ=dd.MM.yyyy;");
			НоваяСтрока.KART = Выборка.Карта;
			НоваяСтрока.AVTO = СокрЛП(Выборка.Автомобиль);
			НоваяСтрока.MESTO = Выборка.МестоТранзакции;
			НоваяСтрока.PRODUCT = Выборка.Продукт;
			НоваяСтрока.VID = "";
			НоваяСтрока.LITR = Выборка.Количество;
			НоваяСтрока.PRICE = Выборка.Цена;
			НоваяСтрока.SUMMA = Выборка.Сумма;
			НоваяСтрока.SKIDKA = Выборка.Скидка;			
		КонецЦикла;	
		ИмяФайла = Exprovip.СформироватьИмяФайла(ВыборкаКонтрагент.Логин, СтруктураНастроек.ПутьДляВыгрузкиИнвойсов, "csv");
		Попытка
			Exprovip.ВыгрузитьТаблицуВCSV(ТаблицаВыгрузки, ";", ИмяФайла);
		Исключение
			ТекстСообщения = СтрШаблон("Ошибка выгрузки %1. Ошибка:%2", ВыборкаКонтрагент.Клиент, ОписаниеОшибки());
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;		
	КонецЦикла;		
КонецПроцедуры

// Таблица для выгрузки контрагента.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица для выгрузки контрагента:
// * DATE 
// * KART 
// * AVTO 
// * MESTO 
// * PRODUCT 
// * VID 
// * LITR 
// * PRICE 
// * SUMMA 
// * SKIDKA 
Функция ТаблицаДляВыгрузкиКонтрагента()
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("DATE");
	Таблица.Колонки.Добавить("KART");
	Таблица.Колонки.Добавить("AVTO");
	Таблица.Колонки.Добавить("MESTO");
	Таблица.Колонки.Добавить("PRODUCT");
	Таблица.Колонки.Добавить("VID");
	Таблица.Колонки.Добавить("LITR");
	Таблица.Колонки.Добавить("PRICE");
	Таблица.Колонки.Добавить("SUMMA");
	Таблица.Колонки.Добавить("SKIDKA");
	
	Возврат Таблица;
КонецФункции
#КонецОбласти
