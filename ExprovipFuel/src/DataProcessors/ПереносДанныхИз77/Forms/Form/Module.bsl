// @strict-types

#Область ОписаниеПеременных
//@skip-check variable-value-type
&НаКлиенте
Перем Сервер77 Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИнформационнаяБазаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
 	СтандартнаяОбработка = Ложь;
 	ПодключитьСервер();
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяБазаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
 	ОтключитьСервер();
КонецПроцедуры
#КонецОбласти

#Область ПодключениеК77

&НаКлиенте
Функция СерверПодключен() Экспорт
    
    Если ТипЗнч(Сервер77)<>Тип("COMОбъект") Тогда
        Объект.ИнформационнаяБаза = "";
        Возврат Ложь;
    КонецЕсли; 
    
    Попытка
        Объект.ИнформационнаяБаза = Сервер77.Метаданные.Идентификатор;
        Возврат Истина;
    Исключение
        Возврат Ложь;
    КонецПопытки;
    
КонецФункции

&НаКлиенте
Функция ОтключитьСервер() Экспорт
    
    Если НЕ СерверПодключен() Тогда
        Возврат Истина;
    КонецЕсли;
    
    Попытка
        Сервер77.ЗавершитьРаботуСистемы(0);
        Результат = Истина;
    Исключение
        Результат = Ложь;
    КонецПопытки;
    
    Сервер77 = Неопределено;
    Объект.ИнформационнаяБаза = "";
    
    Возврат Результат;
    
КонецФункции

&НаКлиенте
Функция ПодключитьСервер() Экспорт	
    
    Если СерверПодключен() Тогда
        ОтключитьСервер();	
    КонецЕсли;
    
    Попытка
        Сервер77 = Новый COMObject("V1CEnterprise.Application"); 
    Исключение
    	ТекстСообщения = "Ошибка создания приложения:" + Символы.ПС + ОписаниеОшибки();
    	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
        Возврат Ложь;
    КонецПопытки;
    
    Попытка
    	Сервер77.Initialize (Сервер77.RMTrade,"/M","NO_SPLASH_SHOW");
    Исключение
        ТекстСообщения = ("Ошибка открытия информационной базы:" + Символы.ПС + ОписаниеОшибки());
        ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
        Возврат Ложь;
    КонецПопытки;
    
    Попытка
        //Сообщить("Получение имени конфигурации");
        Объект.ИнформационнаяБаза = Сервер77.Метаданные.Идентификатор;
    Исключение
        ТекстСообщения = ("Ошибка получения имени конфигурации:" + Символы.ПС + ОписаниеОшибки());
        ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
        Возврат Ложь;
    КонецПопытки;
    
    Возврат Истина;
    
КонецФункции

#КонецОбласти

#Область ЗагрузкаНоменклатуры

&НаКлиенте
Процедура ЗагрузкаНоменклатуры(Команда)
	
    СправочникНоменклатура = Сервер77.CreateObject("Справочник.Номенклатура");
    СправочникНоменклатура.ВыбратьЭлементы();
       
    МассивНоменклатуры = Новый Массив; //Массив Структур
    Пока СправочникНоменклатура.ПолучитьЭлемент() = 1 Цикл
        Если СправочникНоменклатура.ПометкаУдаления() Тогда
            Продолжить;
        КонецЕсли;       
        
        ТекущийЭлементНоменклатуры = СправочникНоменклатура.ТекущийЭлемент();
        СтруктураНоменклатуры = СтруктураНоменклатуры();
        СтруктураНоменклатуры.Наименование = ТекущийЭлементНоменклатуры.Наименование;
		СтруктураНоменклатуры.ИД77 = Сервер77.ЗначениеВСтрокуВнутр(ТекущийЭлементНоменклатуры);
        Если ТекущийЭлементНоменклатуры.ЭтоДороги = 1 Тогда
        	СтруктураНоменклатуры.ЭтоДороги = Истина;
        КонецЕсли;
		СтруктураНоменклатуры.ИДБелтол = ТекущийЭлементНоменклатуры.ИДБелтол;
		СтруктураНоменклатуры.ИДБеларусьнефть = ТекущийЭлементНоменклатуры.ИДБеларусьнефть;
		СтруктураНоменклатуры.ИДТранзиткарт = ТекущийЭлементНоменклатуры.ИДТранзиткарт;
		СтруктураНоменклатуры.ИДТатнефть = ТекущийЭлементНоменклатуры.ИДТатнефть;
         
        МассивНоменклатуры.Добавить(СтруктураНоменклатуры);
    КонецЦикла;
  	СоздатьНоменклатуру(МассивНоменклатуры);
  	ОбщегоНазначенияКлиент.СообщитьПользователю("Номенклатура загружена");
КонецПроцедуры

// Структура номенклатуры.
// 
// Возвращаемое значение:
//  Структура - Структура номенклатуры:
// * Наименование - Строка
// * ИД77 - Строка 
// * ЭтоДороги - Булево
// * ИДБелтол - Строка
// * ИДБеларусьнефть - Строка 
// * ИДТранзиткарт - Строка
// * ИДТатнефть - Строка
&НаКлиенте
Функция СтруктураНоменклатуры()
	Структура = Новый Структура();
	Структура.Вставить("Наименование", "");
	Структура.Вставить("ИД77", "");
	Структура.Вставить("ЭтоДороги", Ложь);
	Структура.Вставить("ИДБелтол", "");
	Структура.Вставить("ИДБеларусьнефть", "");
	Структура.Вставить("ИДТранзиткарт", "");
	Структура.Вставить("ИДТатнефть", "");
	
	Возврат Структура;	
КонецФункции

// Создать номенклатуру.
// 
// Параметры:
//  МассивНоменклатуры - Массив из См. СтруктураНоменклатуры() 
&НаСервере
Процедура СоздатьНоменклатуру(МассивНоменклатуры)
	Для Каждого ЭлементМассива Из МассивНоменклатуры Цикл
		НоменклатураСсылка = Справочники.Номенклатура.НайтиПоРеквизиту("Идентификатор77", ЭлементМассива.ИД77);
		Если ЗначениеЗаполнено(НоменклатураСсылка) Тогда
			НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
		Иначе
			НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
			НоменклатураОбъект.Идентификатор77 = ЭлементМассива.ИД77;	
		КонецЕсли;
		НоменклатураОбъект.ЭтоДороги = ЭлементМассива.ЭтоДороги;
		НоменклатураОбъект.Наименование = ЭлементМассива.Наименование;
		НоменклатураОбъект.НаименованиеПолное = ЭлементМассива.Наименование;
		НоменклатураОбъект.ЭтоДороги = ЭлементМассива.ЭтоДороги; 
		
		МассивИД = Новый Массив;
		МассивИД.Добавить("ИДБелтол");
		МассивИД.Добавить("ИДБеларусьнефть");
		МассивИД.Добавить("ИДТранзиткарт");
		МассивИД.Добавить("ИДТатнефть");
		
		Для Каждого ТекущийИД Из МассивИД Цикл
			Если Не ПустаяСтрока(ЭлементМассива[ТекущийИД]) Тогда
				СтрокаПоиска = НоменклатураОбъект.ИдентификаторыКодовПоставщиков.Найти(ТекущийИД, "Комментарий77");
				Если СтрокаПоиска = Неопределено Тогда
					НоваяСтрокаИД = НоменклатураОбъект.ИдентификаторыКодовПоставщиков.Добавить();
					НоваяСтрокаИД.Комментарий77 = ТекущийИД;
					НоваяСтрокаИД.ИД = ЭлементМассива[ТекущийИД]; 
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		НоменклатураОбъект.Записать();	
	КонецЦикла;	
КонецПроцедуры
#КонецОбласти

#Область ЗагрузкаМестТранзакций

&НаКлиенте
Процедура ЗагрузкаМестТранзакции(Команда)
	СправочникМестаТранзакций = Сервер77.CreateObject("Справочник.МестоТранзакции");
	СправочникМестаТранзакций.ВыбратьЭлементы();
	
	МассивСтруктур = Новый Массив;

	Периодический77 = Сервер77.CreateObject("Периодический");
	
	Счетчик = 0;
	Пока СправочникМестаТранзакций.ПолучитьЭлемент() = 1 Цикл
		Счетчик = Счетчик + 1;
		//Если Счетчик >= 30 Тогда
		//	Прервать;
		//КонецЕсли;	
		ТекущееМестоТранзакции = СправочникМестаТранзакций.ТекущийЭлемент();
		ТекущийРодитель = ТекущееМестоТранзакции.Родитель;
		
		СтруктураМестаТранзакции = СтруктураМестаТранзакции();
		СтруктураМестаТранзакции.Наименование = СправочникМестаТранзакций.Наименование;
		СтруктураМестаТранзакции.ИД77 = Сервер77.ЗначениеВСтрокуВнутр(ТекущееМестоТранзакции);
		СтруктураМестаТранзакции.ИД77Родитель = Сервер77.ЗначениеВСтрокуВнутр(ТекущийРодитель);
		СтруктураМестаТранзакции.КодУчета = ТекущееМестоТранзакции.КодУчета;
		Если СправочникМестаТранзакций.ЭтоГруппа() = 1 Тогда
			СтруктураМестаТранзакции.ЭтоГруппа = Истина;
		КонецЕсли;	
		
		Если СправочникМестаТранзакций.ПометкаУдаления() = 1 Тогда
			СтруктураМестаТранзакции.ПометкаУдаления = Истина;
		КонецЕсли;
		
		Если СтруктураМестаТранзакции.ЭтоГруппа Тогда 
			Периодический77.ИспользоватьОбъект("Скидка", ТекущееМестоТранзакции);
			Периодический77.Выбратьзначения();
			Пока Периодический77.ПолучитьЗначение() = 1 Цикл
				ИДСкидки = Сервер77.ЗначениеВСтрокуВнутр(Периодический77.Значение);			
				
				ЗначениеИстории = СтруктураИсторияСкидокМестаТранзакции();
				ЗначениеИстории.ДатаЗначения = Периодический77.ДатаЗнач;
				ЗначениеИстории.Скидка = ИДСкидки;
				СтруктураМестаТранзакции.ИсторияСкидок.Добавить(ЗначениеИстории); 
			КонецЦикла;
		КонецЕсли;	
		
		Если Не СтруктураМестаТранзакции.ЭтоГруппа Тогда 
			Периодический77.ИспользоватьОбъект("флВыделятьВФактуре", ТекущееМестоТранзакции);
			Периодический77.Выбратьзначения();
			Пока Периодический77.ПолучитьЗначение() = 1 Цикл
				ЗначениеИстории = СтруктураИсторияВыделятьВФактуреМестоТранзакции();
				ЗначениеИстории.ДатаЗначения = Периодический77.ДатаЗнач;
				Если Периодический77.Значение = 1 Тогда
					ЗначениеИстории.ВыделятьВФактуре = Истина;
				КонецЕсли;
				СтруктураМестаТранзакции.ИсторияВыделятьВФактуре.Добавить(ЗначениеИстории);
			КонецЦикла;
		КонецЕсли;	
		МассивСтруктур.Добавить(СтруктураМестаТранзакции);
	КонецЦикла;
	ЗагрузитьМестаТранзакции(МассивСтруктур);	
	ОбщегоНазначенияКлиент.СообщитьПользователю("Места транзакции загружены");
КонецПроцедуры

// Загрузить места транзакции.
// 
// Параметры:
//  МассивСтруктурМестТранзакций - Массив из См.СтруктураМестаТранзакции
&НаСервере
Процедура ЗагрузитьМестаТранзакции(МассивСтруктурМестТранзакций)
	Для Каждого МестоТранзакции Из МассивСтруктурМестТранзакций Цикл
		МестоТранзакцииСсылка = Справочники.МестаТранзакции.НайтиПоРеквизиту("Идентификатор77", МестоТранзакции.ИД77);
		Если ЗначениеЗаполнено(МестоТранзакцииСсылка) Тогда
			МестоТранзакцииОбъект = МестоТранзакцииСсылка.ПолучитьОбъект();
		Иначе
			Если МестоТранзакции.ЭтоГруппа Тогда
				МестоТранзакцииОбъект = Справочники.МестаТранзакции.СоздатьГруппу();
			Иначе
				МестоТранзакцииОбъект = Справочники.МестаТранзакции.СоздатьЭлемент();
			КонецЕсли;
		КонецЕсли;
		МестоТранзакцииОбъект.Идентификатор77 = МестоТранзакции.ИД77;
		Если ЗначениеЗаполнено(МестоТранзакции.ИД77Родитель) Тогда
			МестоТранзакцииОбъект.Родитель = Справочники.МестаТранзакции.НайтиПоРеквизиту("Идентификатор77",
				МестоТранзакции.ИД77Родитель);
		КонецЕсли;
		МестоТранзакцииОбъект.Наименование		= МестоТранзакции.Наименование;
		МестоТранзакцииОбъект.КодУчета			= МестоТранзакции.КодУчета;
		МестоТранзакцииОбъект.ПометкаУдаления	= МестоТранзакции.ПометкаУдаления; 
		МестоТранзакцииОбъект.Записать();

		Для Каждого ЭлементИстории Из МестоТранзакции.ИсторияСкидок Цикл
			МенеджерЗаписи = РегистрыСведений.СкидкиМестТранзакций.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период			= ЭлементИстории.ДатаЗначения;
			МенеджерЗаписи.МестоТранзации	= МестоТранзакцииОбъект.Ссылка;
			МенеджерЗаписи.Скидка			= Справочники.Скидки.НайтиПоРеквизиту("Идентификатор77", ЭлементИстории.Скидка);
			МенеджерЗаписи.Записать();
		КонецЦикла;
		Для Каждого ЭлементИстории Из МестоТранзакции.ИсторияВыделятьВФактуре Цикл
			МенеджерЗаписи = РегистрыСведений.СвойстваМестТранзакций.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период			= ЭлементИстории.ДатаЗначения;
			МенеджерЗаписи.МестоТранзакции	= МестоТранзакцииОбъект.Ссылка;
			МенеджерЗаписи.ВыделятьВФактуре = ЭлементИстории.ВыделятьВФактуре;
			МенеджерЗаписи.Записать();
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Структура история скидок места транзакции.
// 
// Возвращаемое значение:
//  Структура - Структура история скидок места транзакции:
// * Скидка - СправочникСсылка.Скидки 
// * ДатаЗначения - Дата 
&НаКлиенте
Функция СтруктураИсторияСкидокМестаТранзакции()
	
	Структура = Новый Структура();
	Структура.Вставить("Скидка", ПредопределенноеЗначение("Справочник.Скидки.ПустаяСсылка"));
	Структура.Вставить("ДатаЗначения", Дата(1, 1, 1));
	
	Возврат Структура;
	
КонецФункции

// Структура история выделять в фактуре место транзакции.
// 
// Возвращаемое значение:
//  Структура - Структура история выделять в фактуре место транзакции:
// * ВыделятьВФактуре - Булево 
// * ДатаЗначения - Дата 
&НаКлиенте
Функция СтруктураИсторияВыделятьВФактуреМестоТранзакции()
	
	Структура = Новый Структура();
	Структура.Вставить("ВыделятьВФактуре", Ложь);
	Структура.Вставить("ДатаЗначения", Дата(1, 1, 1));
	
	Возврат Структура;
	
КонецФункции	

// Структура места транзакции.
// 
// Возвращаемое значение:
//  Структура - Структура места транзакции:
// * Наименование - Строка
// * ИД77 - Строка
// * ИД77Родитель - Строка   
// * ЭтоГруппа - Булево
// * ПометкаУдаления - Булево 
// * КодУчета - Строка
// * ИсторияСкидок - Массив из См. СтруктураИсторияСкидокМестаТранзакции()  
// * ИсторияВыделятьВФактуре - Массив из См. СтруктураИсторияВыделятьВФактуреМестоТранзакции() 
&НаКлиенте
Функция СтруктураМестаТранзакции()
	Структура = Новый Структура();
	Структура.Вставить("Наименование", "");
	Структура.Вставить("ИД77", "");
	Структура.Вставить("ИД77Родитель", "");
	Структура.Вставить("ЭтоГруппа", Ложь);
	Структура.Вставить("КодУчета", "");
	Структура.Вставить("ИсторияСкидок", Новый Массив);
	Структура.Вставить("ИсторияВыделятьВФактуре", Новый Массив);
	Структура.Вставить("ПометкаУдаления", Ложь);
	
	Возврат Структура;	
КонецФункции	

#КонецОбласти

#Область ЗагрузкаСкидок

&НаКлиенте
Процедура ЗагрузкаСкидок(Команда)
	СправочникСкидки = Сервер77.CreateObject("Справочник.Скидки");
	СправочникСкидки.ВыбратьЭлементы();
	
	МассивСтруктур = Новый Массив;

	Периодический77 = Сервер77.CreateObject("Периодический");
	
	Пока СправочникСкидки.ПолучитьЭлемент() = 1 Цикл
		ТекущаяСкидка77 = СправочникСкидки.ТекущийЭлемент();
		
		СтруктураСкидки = СтруктураСкидки();
		СтруктураСкидки.Наименование = СправочникСкидки.Наименование;
		СтруктураСкидки.ИД77 = Сервер77.ЗначениеВСтрокуВнутр(ТекущаяСкидка77);
		Если СправочникСкидки.ПометкаУдаления() = 1 Тогда
			СтруктураСкидки.ПометкаУдаления = Истина;
		КонецЕсли;
		
		Периодический77.ИспользоватьОбъект("Значение", ТекущаяСкидка77);
		Периодический77.выбратьзначения();
		Пока Периодический77.ПолучитьЗначение() = 1 Цикл
			ЗначениеИстории = СтруктураИсторииСкидки();
			ЗначениеИстории.ДатаЗначения = Периодический77.ДатаЗнач;
			ЗначениеИстории.ЗначениеСкидки = Периодический77.Значение;
			СтруктураСкидки.ИсторияЗначений.Добавить(ЗначениеИстории); 
		КонецЦикла;
		МассивСтруктур.Добавить(СтруктураСкидки);
	КонецЦикла;
	ЗагрузитьСкидкиНаСервере(МассивСтруктур);
	ОбщегоНазначенияКлиент.СообщитьПользователю("Скидки загружены");	 	
КонецПроцедуры

// Загрузить скидки на сервере.
// 
// Параметры:
//  МассивСтруктурСкидок - Массив из См. СтруктураСкидки 
&НаСервере
Процедура ЗагрузитьСкидкиНаСервере(МассивСтруктурСкидок)
	
	Для Каждого Скидка Из МассивСтруктурСкидок Цикл
		СкидкаСсылка = Справочники.Скидки.НайтиПоРеквизиту("Идентификатор77", Скидка.ИД77);
		Если ЗначениеЗаполнено(СкидкаСсылка) Тогда
			СкидкаОбъект = СкидкаСсылка.ПолучитьОбъект();
		Иначе
			СкидкаОбъект = Справочники.Скидки.СоздатьЭлемент();
			СкидкаОбъект.Идентификатор77 = Скидка.ИД77;
		КонецЕсли;
		СкидкаОбъект.Наименование = Скидка.Наименование;
		СкидкаОбъект.Записать();
		
		Для Каждого ЗначениеИстории Из Скидка.ИсторияЗначений Цикл
			МенеджерЗаписи = РегистрыСведений.ЗначенияСкидок.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Скидка = СкидкаОбъект.Ссылка;
			МенеджерЗаписи.Период = ЗначениеИстории.ДатаЗначения;
			МенеджерЗаписи.ЗначениеСкидки = ЗначениеИстории.ЗначениеСкидки;
			МенеджерЗаписи.Записать();
		КонецЦикла;	
	КонецЦикла;	
	
КонецПроцедуры	

// Структура истории скидки.
// 
// Возвращаемое значение:
//  Структура - Структура истории скидки:
// * ДатаЗначения - Дата  
// * ЗначениеСкидки - Число 
&НаКлиенте
Функция СтруктураИсторииСкидки()
	Структура = Новый Структура();
	Структура.Вставить("ДатаЗначения", Дата(1, 1, 1));
	Структура.Вставить("ЗначениеСкидки", 0);
	
	Возврат Структура;
КонецФункции	

// Структура скидки.
// 
// Возвращаемое значение:
//  Структура - Структура скидки:
// * Наименование - Строка
// * ИД77 - Строка 
// * ПометкаУдаления - Булево 
// * ИсторияЗначений - Массив из  См. СтруктураИсторииСкидки 
&НаКлиенте
Функция СтруктураСкидки()
	СтруктураСкидки = Новый Структура();
	СтруктураСкидки.Вставить("Наименование", "");
	СтруктураСкидки.Вставить("ИД77", "");
	СтруктураСкидки.Вставить("ПометкаУдаления", Ложь);
	СтруктураСкидки.Вставить("ИсторияЗначений", Новый Массив);
	
	Возврат СтруктураСкидки
КонецФункции	

#КонецОбласти

#Область Контрагенты

&НаКлиенте
Процедура ЗагрузкаКонтрагентов(Команда)
	
	#Область ИмпортКлиентов
	СправочникКлиенты = Сервер77.CreateObject("Справочник.Клиенты");
	СправочникКлиенты.ВыбратьЭлементы();
	
	МассивСтруктур = Новый Массив;

	Периодический77 = Сервер77.CreateObject("Периодический");
	
	Пока СправочникКлиенты.ПолучитьЭлемент() = 1 Цикл
		ТекущийКлиент77 = СправочникКлиенты.ТекущийЭлемент();
		Если ТекущийКлиент77.ЭтоГруппа() = 1 Тогда
			Продолжить;
		КонецЕсли;	
		
		СтруктураКонтрагента = СтруктураКлиента();
		СтруктураКонтрагента.Наименование		= СокрЛП(ТекущийКлиент77.Наименование);
		СтруктураКонтрагента.ПолноеНаименование = СокрЛП(ТекущийКлиент77.ПолучитьАтрибут("ПолноеНаименование"));
		СтруктураКонтрагента.АдресЮридический	= СокрЛП(ТекущийКлиент77.АдресЮридический);
		СтруктураКонтрагента.АдресПочтовый		= СокрЛП(ТекущийКлиент77.АдресПочтовый);
		СтруктураКонтрагента.НИП				= СокрЛП(ТекущийКлиент77.НИП);
		СтруктураКонтрагента.ПочтовыйКод		= СокрЛП(ТекущийКлиент77.ПочтовыйКод);
		СтруктураКонтрагента.ЮридическийКод		= СокрЛП(ТекущийКлиент77.ПочтовыйКод1);
		СтруктураКонтрагента.Телефон			= СокрЛП(ТекущийКлиент77.Телефон);
		СтруктураКонтрагента.Емэйл				= СокрЛП(ТекущийКлиент77.емаил);
		СтруктураКонтрагента.ПутьДляВыгрузки	= СокрЛП(ТекущийКлиент77.ПутьДляВыгрузки);
		СтруктураКонтрагента.Логин				= СокрЛП(ТекущийКлиент77.Логин); 
		СтруктураКонтрагента.ТелефонДляСМС		= СокрЛП(ТекущийКлиент77.ТелДляСМС);  
		СтруктураКонтрагента.ИД77				= Сервер77.ЗначениеВСтрокуВнутр(ТекущийКлиент77);
		СтруктураКонтрагента.ЭтоКлиент			= Истина;
		Если ТекущийКлиент77.ПометкаУдаления() = 1 Тогда
			СтруктураКонтрагента.ПометкаУдаления = Истина;
		КонецЕсли;
		Если ТекущийКлиент77.ЭтоГруппа() = 1 Тогда
			СтруктураКонтрагента.ЭтоГруппа = Истина;
		КонецЕсли;
		
		Если Не СтруктураКонтрагента.ЭтоГруппа Тогда 
			Периодический77.ИспользоватьОбъект("Скидка", ТекущийКлиент77);
			Периодический77.ВыбратьЗначения();
			Пока Периодический77.ПолучитьЗначение() = 1 Цикл
				ЗначениеИстории = СтруктураСкидкиКлиента();
				ЗначениеИстории.ДатаЗначения = Периодический77.ДатаЗнач;
				ЗначениеИстории.ИДСкидка77 = Сервер77.ЗначениеВСтрокуВнутр(Периодический77.Значение);
				СтруктураКонтрагента.ИсторияСкидки.Добавить(ЗначениеИстории); 
			КонецЦикла;
			Периодический77.ИспользоватьОбъект("флНеУчитыватьОсобыеУсловия", ТекущийКлиент77);
			Периодический77.ВыбратьЗначения();
			Пока Периодический77.ПолучитьЗначение() = 1 Цикл
				ЗначениеИстории = СтруктураНеУчитыватьОсобыеУсловия();
				ЗначениеИстории.ДатаЗначения = Периодический77.ДатаЗнач;
				Если Периодический77.Значение = 1 Тогда 
					ЗначениеИстории.НеУчитыватьОсобыеУсловия = Истина;
				КонецЕсли;	
				СтруктураКонтрагента.ИсторияНеУчитыватьОсобыеУсловия.Добавить(ЗначениеИстории); 
			КонецЦикла;
		КонецЕсли;	
		МассивСтруктур.Добавить(СтруктураКонтрагента);
	КонецЦикла;
	ЗагрузитьКлиентовНаСервере(МассивСтруктур);
	ОбщегоНазначенияКлиент.СообщитьПользователю("Клиенты загружены");
	#КонецОбласти
	
	#Область ИмпортПоставщиков
	СправочникПоставщики = Сервер77.CreateObject("Справочник.Поставщики");
	СправочникПоставщики.ВыбратьЭлементы();
	
	МассивСтруктур = Новый Массив;

	Пока СправочникПоставщики.ПолучитьЭлемент() = 1 Цикл
		ТекущийКлиент77 = СправочникПоставщики.ТекущийЭлемент();
		Если ТекущийКлиент77.ЭтоГруппа() = 1 Тогда
			Продолжить;
		КонецЕсли;	
		
		СтруктураКонтрагента = СтруктураКлиента();
		СтруктураКонтрагента.Наименование		= СокрЛП(ТекущийКлиент77.Наименование);
		СтруктураКонтрагента.ПолноеНаименование = СокрЛП(ТекущийКлиент77.ПолучитьАтрибут("ПолноеНаименование"));
		СтруктураКонтрагента.АдресЮридический	= СокрЛП(ТекущийКлиент77.АдресЮридический);
		СтруктураКонтрагента.АдресПочтовый		= СокрЛП(ТекущийКлиент77.АдресПочтовый);
		СтруктураКонтрагента.НИП				= СокрЛП(ТекущийКлиент77.НИП);
		СтруктураКонтрагента.ПочтовыйКод		= СокрЛП(ТекущийКлиент77.ПочтовыйКод);
		СтруктураКонтрагента.ЮридическийКод		= СокрЛП(ТекущийКлиент77.ПочтовыйКод1);
		СтруктураКонтрагента.Телефон			= СокрЛП(ТекущийКлиент77.Телефон);
		СтруктураКонтрагента.ИД77				= Сервер77.ЗначениеВСтрокуВнутр(ТекущийКлиент77);
		СтруктураКонтрагента.ЭтоКлиент			= Ложь;
		СтруктураКонтрагента.ЭтоПоставщик		= Истина;
		Если ТекущийКлиент77.ПометкаУдаления() = 1 Тогда
			СтруктураКонтрагента.ПометкаУдаления = Истина;
		КонецЕсли;
		Если ТекущийКлиент77.ЭтоГруппа() = 1 Тогда
			СтруктураКонтрагента.ЭтоГруппа = Истина;
		КонецЕсли;
				
		МассивСтруктур.Добавить(СтруктураКонтрагента);
	КонецЦикла;
	ЗагрузитьКлиентовНаСервере(МассивСтруктур);
	ОбщегоНазначенияКлиент.СообщитьПользователю("Поставщики загружены");
	#КонецОбласти
КонецПроцедуры

// Загрузить клиентов на сервере.
// 
// Параметры:
//  МассивСтруктур - Массив из См. СтруктураКлиента()
&НаСервере
Процедура ЗагрузитьКлиентовНаСервере(МассивСтруктур)
	Для Каждого Контрагент Из МассивСтруктур Цикл
		Если Контрагент.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;	 
		
		КонтрагентСсылка = Справочники.Контрагенты.НайтиПоРеквизиту("Идентификатор77", Контрагент.ИД77);
		Если ЗначениеЗаполнено(КонтрагентСсылка) Тогда
			КонтрагентОбъект = КонтрагентСсылка.ПолучитьОбъект();
		Иначе
			КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
			КонтрагентОбъект.Идентификатор77 = Контрагент.ИД77;	
		КонецЕсли;
		КонтрагентОбъект.Наименование		= Контрагент.Наименование;
		КонтрагентОбъект.НаименованиеПолное = Контрагент.ПолноеНаименование;
		КонтрагентОбъект.ПочтовыйКод		= Контрагент.ПочтовыйКод;
		КонтрагентОбъект.ЮридическийКод		= Контрагент.ЮридическийКод;
		КонтрагентОбъект.ПутьДляВыгрузки	= Контрагент.ПутьДляВыгрузки;
		КонтрагентОбъект.Логин				= Контрагент.Логин;
		КонтрагентОбъект.ЭтоКлиент			= Контрагент.ЭтоКлиент;
		КонтрагентОбъект.ЭтоПоставщик		= Контрагент.ЭтоПоставщик;
		КонтрагентОбъект.ПометкаУдаления	= Контрагент.ПометкаУдаления;
		КонтрагентОбъект.ПутьДляВыгрузки	= Контрагент.ПутьДляВыгрузки;
		
		КонтрагентОбъект.КонтактнаяИнформация.Очистить();
		
		//Юридически адрес
		Если Не ПустаяСтрока(Контрагент.АдресЮридический) Тогда
			НоваяСтрокаКИ = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
			НоваяСтрокаКИ.Тип			= Перечисления.ТипыКонтактнойИнформации.Адрес;
			НоваяСтрокаКИ.Вид			= Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
			НоваяСтрокаКИ.Представление = Контрагент.АдресЮридический;
		КонецЕсли;	
		
		//Почтовый адрес
		Если Не ПустаяСтрока(Контрагент.АдресПочтовый) Тогда
			НоваяСтрокаКИ = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
			НоваяСтрокаКИ.Тип			= Перечисления.ТипыКонтактнойИнформации.Адрес;
			НоваяСтрокаКИ.Вид			= Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
			НоваяСтрокаКИ.Представление = Контрагент.АдресПочтовый;
		КонецЕсли;
		
		//Телефон
		Если Не ПустаяСтрока(Контрагент.Телефон) Тогда
			НоваяСтрокаКИ = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
			НоваяСтрокаКИ.Тип			= Перечисления.ТипыКонтактнойИнформации.Телефон;
			НоваяСтрокаКИ.Вид			= Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
			НоваяСтрокаКИ.Представление = Контрагент.Телефон;
			НоваяСтрокаКИ.НомерТелефона = Контрагент.Телефон;
		КонецЕсли;	
		
		//Телефон для СМС
		Если Не ПустаяСтрока(Контрагент.ТелефонДляСМС) Тогда
			НоваяСтрокаКИ = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
			НоваяСтрокаКИ.Тип			= Перечисления.ТипыКонтактнойИнформации.Телефон;
			НоваяСтрокаКИ.Вид			= Справочники.ВидыКонтактнойИнформации.ТелефонДляСМС;
			НоваяСтрокаКИ.Представление = Контрагент.ТелефонДляСМС;
			НоваяСтрокаКИ.НомерТелефона = Контрагент.ТелефонДляСМС;
		КонецЕсли;
		
		//Почта
		Если Не ПустаяСтрока(Контрагент.Емэйл) Тогда
			НоваяСтрокаКИ = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
			НоваяСтрокаКИ.Тип			= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			НоваяСтрокаКИ.Вид			= Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты;
			НоваяСтрокаКИ.Представление = Контрагент.Емэйл;
			НоваяСтрокаКИ.АдресЭП		= Контрагент.Емэйл;
		КонецЕсли; 
		
		Если КонтрагентОбъект.ЭтоКлиент Тогда
			КонтрагентОбъект.Родитель = Справочники.Контрагенты.Клиенты;
		КонецЕсли;
		Если КонтрагентОбъект.ЭтоПоставщик Тогда
			КонтрагентОбъект.Родитель = Справочники.Контрагенты.Поставщики;
		КонецЕсли;
		КонтрагентОбъект.Записать();
		
		Для Каждого ЭлементИстории Из Контрагент.ИсторияСкидки Цикл
			МенеджерЗаписи = РегистрыСведений.СкидкиКонтрагентов.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Контрагент	= КонтрагентОбъект.Ссылка;
			МенеджерЗаписи.Скидка		= Справочники.Скидки.НайтиПоРеквизиту("Идентификатор77", ЭлементИстории.ИДСкидка77);
			МенеджерЗаписи.Период		= ЭлементИстории.ДатаЗначения;
			МенеджерЗаписи.Записать(Истина);
		КонецЦикла;	
		
		Для Каждого ЭлементИстории Из Контрагент.ИсторияНеУчитыватьОсобыеУсловия Цикл	
			МенеджерЗаписи = РегистрыСведений.ОсобыеУсловияКонтрагентов.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Контрагент					= КонтрагентОбъект.Ссылка;
			МенеджерЗаписи.НеИспользоватьОсобыеУсловия	= ЭлементИстории.НеУчитыватьОсобыеУсловия;
			МенеджерЗаписи.Период						= ЭлементИстории.ДатаЗначения;
			МенеджерЗаписи.Записать(Истина);
		КонецЦикла;	 
			
	КонецЦикла;	
КонецПроцедуры	

// Структура клиента.
// 
// Возвращаемое значение:
//  Структура - Структура клиента:
// * ИД77 - Строка - 
// * Наименование - Строка - 
// * ПолноеНаименование - Строка - 
// * АдресЮридический - Строка - 
// * АдресПочтовый - Строка - 
// * ПочтовыйКод - Строка - 
// * ЮридическийКод - Строка - 
// * Телефон - Строка - 
// * ТелефонДляСМС - Строка - 
// * Емэйл - Строка - 
// * ПутьДляВыгрузки - Строка - 
// * Логин - Строка - 
// * НИП - Строка -
// * ЭтоКлиент - Булево -
// * ЭтоПоставщик - Булево -
// * ИсторияСкидки - Массив из См. СтруктураСкидкиКлиента()
// * ИсторияНеУчитыватьОсобыеУсловия -Массив из См. СтруктураНеУчитыватьОсобыеУсловия()
// * ПометкаУдаления - Булево
// * ЭтоГруппа - Булево 
&НаКлиенте
Функция СтруктураКлиента()
	Структура = Новый Структура();
	Структура.Вставить("ИД77", "");
	Структура.Вставить("Наименование", "");
	Структура.Вставить("ПолноеНаименование", "");
	Структура.Вставить("АдресЮридический", "");
	Структура.Вставить("АдресПочтовый", "");
	Структура.Вставить("ПочтовыйКод", "");
	Структура.Вставить("ЮридическийКод", "");
	Структура.Вставить("Телефон", "");
	Структура.Вставить("ТелефонДляСМС", "");
	Структура.Вставить("Емэйл", "");
	Структура.Вставить("ПутьДляВыгрузки", "");
	Структура.Вставить("Логин", "");
	Структура.Вставить("НИП", "");
	Структура.Вставить("ЭтоКлиент", Ложь);
	Структура.Вставить("ЭтоПоставщик", Ложь);
	Структура.Вставить("ИсторияСкидки", Новый Массив);
	Структура.Вставить("ИсторияНеУчитыватьОсобыеУсловия", Новый Массив);
	Структура.Вставить("ПометкаУдаления", Ложь);
	Структура.Вставить("ЭтоГруппа", Ложь);
	
	Возврат Структура;
	
КонецФункции

// Структура скидки клиента.
// 
// Возвращаемое значение:
//  Структура - Структура скидки клиента:
// * ДатаЗначения - Дата - 
// * ИДСкидка77 - Строка - 
&НаКлиенте
Функция СтруктураСкидкиКлиента()
	Структура = Новый Структура();
	Структура.Вставить("ДатаЗначения", Дата(1, 1, 1));
	Структура.Вставить("ИДСкидка77", "");
	
	Возврат Структура;	
КонецФункции	 

// Структура не учитывать особые условия.
// 
// Возвращаемое значение:
//  Структура - Структура не учитывать особые условия:
// * ДатаЗначения - Дата - 
// * НеУчитыватьОсобыеУсловия - Булево - 
&НаКлиенте
Функция СтруктураНеУчитыватьОсобыеУсловия()
	Структура = Новый Структура();
	Структура.Вставить("ДатаЗначения", Дата(1, 1, 1));
	Структура.Вставить("НеУчитыватьОсобыеУсловия", Ложь);
	
	Возврат Структура;
КонецФункции		

#КонецОбласти

#Область Автомобили 

&НаКлиенте
Процедура ЗагрузкаАвтомобилей(Команда)
	СправочникКлиенты = Сервер77.CreateObject("Справочник.Клиенты");
	СправочникАвтомобили = Сервер77.CreateObject("Справочник.Автомобили");

	МассивСтруктур = Новый Массив;

	СправочникКлиенты.ВыбратьЭлементы();
	Пока СправочникКлиенты.ПолучитьЭлемент() = 1 Цикл
		ТекущийКлиент = СправочникКлиенты.ТекущийЭлемент();
		Если ТекущийКлиент.ЭтоГруппа() = 1 Тогда
			Продолжить;
		КонецЕсли;
		СправочникАвтомобили.ИспользоватьВладельца(ТекущийКлиент);
		СправочникАвтомобили.ВыбратьЭлементы();
		Пока СправочникАвтомобили.ПолучитьЭлемент() = 1 Цикл
			ТекущийАвтомобиль77 = СправочникАвтомобили.ТекущийЭлемент();
			Владелец77 = ТекущийАвтомобиль77.Владелец;

			СтруктураАвтомобиля = СтруктураАвтомобиля();
			СтруктураАвтомобиля.Наименование = СправочникАвтомобили.Наименование;
			СтруктураАвтомобиля.ИД77 = Сервер77.ЗначениеВСтрокуВнутр(ТекущийАвтомобиль77);
			СтруктураАвтомобиля.Владелец77 = Сервер77.ЗначениеВСтрокуВнутр(Владелец77);
			СтруктураАвтомобиля.НомерБелтол = СправочникАвтомобили.НомерБелтол;
			Если ТекущийАвтомобиль77.ЭтоГруппа() = 1 Тогда
				СтруктураАвтомобиля.ЭтоГруппа = Истина;
			КонецЕсли;
			Если СправочникАвтомобили.ПометкаУдаления() = 1 Тогда
				СтруктураАвтомобиля.ПометкаУдаления = Истина;
			КонецЕсли;

			МассивСтруктур.Добавить(СтруктураАвтомобиля);
		КонецЦикла;

	КонецЦикла;

	ЗагрузитьАвтомобилиНаСервере(МассивСтруктур);
	ОбщегоНазначенияКлиент.СообщитьПользователю("Автомобили загружены");
КонецПроцедуры

// Загрузить автомобили на сервере.
// 
// Параметры:
//  МассивСтруктур - Массив Из См. СтруктураАвтомобиля() 
&НаСервере
Процедура ЗагрузитьАвтомобилиНаСервере(МассивСтруктур)
	Для Каждого Автомобиль Из МассивСтруктур Цикл
		АвтомобильСсылка = Справочники.Автомобили.НайтиПоРеквизиту("Идентификатор77", Автомобиль.ИД77);
		Если ЗначениеЗаполнено(АвтомобильСсылка) Тогда
			АвтомобильОбъект = АвтомобильСсылка.ПолучитьОбъект();
		Иначе
			АвтомобильОбъект = Справочники.Автомобили.СоздатьЭлемент();
			АвтомобильОбъект.Идентификатор77 = Автомобиль.ИД77; 
		КонецЕсли;
		АвтомобильОбъект.Наименование		= Автомобиль.Наименование;
		АвтомобильОбъект.НомерБелтол		= Автомобиль.НомерБелтол;
		АвтомобильОбъект.Владелец			= Справочники.Контрагенты.НайтиПоРеквизиту("Идентификатор77", Автомобиль.Владелец77);
		АвтомобильОбъект.ПометкаУдаления	= Автомобиль.ПометкаУдаления;
		АвтомобильОбъект.Записать();		
	КонецЦикла;	 		
КонецПроцедуры	

// Структура автомобиля.
// 
// Возвращаемое значение:
//  Структура - Структура автомобиля:
// * ИД77 - Строка - 
// * Владелец77 - Строка - 
// * Наименование - Строка - 
// * НомерБелтол - Строка - 
// * ЭтоГруппа - Булево -
// * ПометкаУдаления - Булево -
&НаКлиенте
Функция СтруктураАвтомобиля()
	Структура = Новый Структура();
	Структура.Вставить("ИД77", "");
	Структура.Вставить("Владелец77", "");
	Структура.Вставить("Наименование", "");
	Структура.Вставить("НомерБелтол", "");
	Структура.Вставить("ЭтоГруппа", Ложь);
	Структура.Вставить("ПометкаУдаления", Ложь);
	
	Возврат Структура;
КонецФункции	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗагрузитьВсе(Команда)
	ЗагрузкаНоменклатуры(Неопределено);
	ЗагрузкаСкидок(Неопределено);
	ЗагрузкаМестТранзакции(Неопределено);	
	ЗагрузкаКонтрагентов(Неопределено);
	ЗагрузкаАвтомобилей(Неопределено);
КонецПроцедуры

#КонецОбласти
