// @strict-types

Процедура ПриДобавленииПодсистемы(Структура) Экспорт	
	Возврат;	
КонецПроцедуры

// Сформировать имя файла.
// 
// Параметры:
//  ИмяКлиента - Строка
//  ИмяКаталога - Строка
//  Расширение - Строка
// 
// Возвращаемое значение:
//  Строка - Сформировать имя файла
Функция СформироватьИмяФайла(ИмяКлиента, ИмяКаталога, Расширение) Экспорт
	СтруктураНастроек = Справочники.Настройки.ПолучитьНастройки();
	
	ИмяФайла = СтрШаблон("%1\%2\%3", 
		СокрЛП(СтруктураНастроек.ПутьДляВыгрузки),
	 	СокрЛП(ИмяКлиента), 
	 	СокрЛП(ИмяКаталога));
	
	ИмяФайла = СтрЗаменить(ИмяФайла,"""",""); 
	ИмяФайла = СтрЗаменить(ИмяФайла,".",""); 
	ИмяФайла = СтрЗаменить(ИмяФайла," ","");
	ИмяФайла = СтрШаблон("%1.%2", ИмяФайла, Расширение);
	
	Возврат ИмяФайла;
КонецФункции

// Выгрузить таблицу ВCSV.
// 
// Параметры:
//  ТаблицаЗначений - ТаблицаЗначений
//  Разделитель - Строка
//  ИмяФайла - Строка
// 
// Возвращаемое значение:
//  
Функция ВыгрузитьТаблицуВCSV(ТаблицаЗначений, Разделитель, ИмяФайла) Экспорт
	ПроверитьИлиСоздатьКаталог(ИмяФайла);
	ТекстФайла = Новый ТекстовыйДокумент;

	СтрокаЗаголовка = "";
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		СтрокаЗаголовка = СтрокаЗаголовка + Колонка.Имя + Разделитель;
	КонецЦикла;

	Если СтрДлина(СтрокаЗаголовка) > 0 Тогда
		СтрокаЗаголовка = Лев(СтрокаЗаголовка, СтрДлина(СтрокаЗаголовка) - СтрДлина(Разделитель));
	КонецЕсли;

	ТекстФайла.ДобавитьСтроку(СтрокаЗаголовка);

	Для Каждого СтрокаТаблицыЗначений Из ТаблицаЗначений Цикл
		СтрокаCSV = "";
		Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
			ТекущееЗначение = СтрокаТаблицыЗначений[Колонка.Имя];
			Текст = Строка(ТекущееЗначение);
			
			СтрокаCSV = СтрокаCSV + Текст + Разделитель;
		КонецЦикла;

		Если СтрДлина(СтрокаCSV) > 0 Тогда
			СтрокаCSV = Лев(СтрокаCSV, СтрДлина(СтрокаCSV) - СтрДлина(Разделитель));
		КонецЕсли;

		ТекстФайла.ДобавитьСтроку(СтрокаCSV);
	КонецЦикла;

	ТекстФайла.Записать(ИмяФайла, КодировкаТекста.UTF8);
КонецФункции

// Проверить или создать каталог.
// 
// Параметры:
//  ПолныйПутьКФайлу - Текст
Процедура ПроверитьИлиСоздатьКаталог(ПолныйПутьКФайлу)
	Файл = Новый Файл(ПолныйПутьКФайлу);
	ПутьККаталогу = Файл.Путь;
	Каталог = Новый Файл(ПутьККаталогу);
	
	Если Не Каталог.Существует() Тогда
		СоздатьКаталог(ПутьККаталогу);
	КонецЕсли;
КонецПроцедуры

// Получить вид скидки контрагента.
// 
// Параметры:
//  КонтрагентСсылка - СправочникСсылка.Контрагенты
//  ДатаЗапроса - Дата
// 
// Возвращаемое значение:
//  СправочникСсылка.Скидки - Вид скидки контрагента
Функция ПолучитьВидСкидкиКонтрагента(КонтрагентСсылка, ДатаЗапроса) Экспорт
	ВидСкидки = Справочники.Скидки.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", КонтрагентСсылка);
	Запрос.УстановитьПараметр("ДатаЗапроса", ДатаЗапроса);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СкидкиКонтрагентовСрезПоследних.Скидка
	|ИЗ
	|	РегистрСведений.СкидкиКонтрагентов.СрезПоследних(&ДатаЗапроса, Контрагент = &Контрагент) КАК
	|		СкидкиКонтрагентовСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВидСкидки = Выборка.Скидка;
	КонецЕсли;
	Возврат ВидСкидки;
КонецФункции

Функция ПрописьЧисла(ЗначениеЧисла, Валюта) Экспорт
	ЗначениеЧислаПописью = ЧислоПрописью(ЗначениеЧисла);
	ВалютаЕвро = Справочники.Валюты.НайтиПоКоду(978);
	ВалютаДолллар = Справочники.Валюты.НайтиПоКоду(840);
	ВалютаРосРубль = Справочники.Валюты.НайтиПоКоду(643);
	ВалютаБелРубль = Справочники.Валюты.НайтиПоКоду(933);
	Если Валюта = ВалютаЕвро Тогда
		ФормСтрока = "L=pl_PL; ДП = Истина";
		ПарПредмета="Euro, Euro, Euro, М, cent, cent, cent, M, 2";
		ЗначениеЧислаПописью = ЧислоПрописью(ЗначениеЧисла, ФормСтрока, ПарПредмета);		
	ИначеЕсли Валюта = ВалютаДолллар Тогда
		ФормСтрока = "Л = ru_RU; ДП = Истина";
		ПарПредмета="доллар, доллара, долларов, м, цент, цента, центов, м, 2";
		ЗначениеЧислаПописью = ЧислоПрописью(ЗначениеЧисла, ФормСтрока, ПарПредмета);		
	КонецЕсли;
	Возврат ЗначениеЧислаПописью;		
КонецФункции		