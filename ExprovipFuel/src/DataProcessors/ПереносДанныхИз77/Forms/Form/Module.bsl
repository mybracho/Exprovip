// @strict-types

#Область ОписаниеПеременных
//@skip-check variable-value-type
&НаКлиенте
Перем Сервер77 Экспорт;
&НаКлиенте
Перем ОбрабатываемыйПериод Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИнформационнаяБазаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
 	СтандартнаяОбработка = Ложь;
 	ПодключитьСервер();
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяБазаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
 	ОтключитьСервер();
КонецПроцедуры
#КонецОбласти

#Область ПодключениеК77

&НаКлиенте
Функция СерверПодключен() Экспорт
    
    Если ТипЗнч(Сервер77)<>Тип("COMОбъект") Тогда
        Объект.ИнформационнаяБаза = "";
        Возврат Ложь;
    КонецЕсли; 
    
    Попытка
        Объект.ИнформационнаяБаза = Сервер77.Метаданные.Идентификатор;
        Возврат Истина;
    Исключение
        Возврат Ложь;
    КонецПопытки;
    
КонецФункции

&НаКлиенте
Функция ОтключитьСервер() Экспорт
    
    Если НЕ СерверПодключен() Тогда
        Возврат Истина;
    КонецЕсли;
    
    Попытка
        Сервер77.ЗавершитьРаботуСистемы(0);
        Результат = Истина;
    Исключение
        Результат = Ложь;
    КонецПопытки;
    
    Сервер77 = Неопределено;
    Объект.ИнформационнаяБаза = "";
    
    Возврат Результат;
    
КонецФункции

&НаКлиенте
Функция ПодключитьСервер() Экспорт	
    
    Если СерверПодключен() Тогда
        ОтключитьСервер();	
    КонецЕсли;
    
    Попытка
        Сервер77 = Новый COMObject("V1CEnterprise.Application"); 
    Исключение
    	ТекстСообщения = "Ошибка создания приложения:" + Символы.ПС + ОписаниеОшибки();
    	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
        Возврат Ложь;
    КонецПопытки;
    
    Попытка
    	Сервер77.Initialize (Сервер77.RMTrade,"/M","NO_SPLASH_SHOW");
    Исключение
        ТекстСообщения = ("Ошибка открытия информационной базы:" + Символы.ПС + ОписаниеОшибки());
        ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
        Возврат Ложь;
    КонецПопытки;
    
    Попытка
        //Сообщить("Получение имени конфигурации");
        Объект.ИнформационнаяБаза = Сервер77.Метаданные.Идентификатор;
    Исключение
        ТекстСообщения = ("Ошибка получения имени конфигурации:" + Символы.ПС + ОписаниеОшибки());
        ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
        Возврат Ложь;
    КонецПопытки;
    
    Возврат Истина;
    
КонецФункции

#КонецОбласти

#Область ЗагрузкаНоменклатуры

&НаКлиенте
Процедура ЗагрузкаНоменклатуры(Команда)
	
    СправочникНоменклатура = Сервер77.CreateObject("Справочник.Номенклатура");
    СправочникНоменклатура.ВыбратьЭлементы();
       
    МассивНоменклатуры = Новый Массив; //Массив Структур
    Пока СправочникНоменклатура.ПолучитьЭлемент() = 1 Цикл
        Если СправочникНоменклатура.ПометкаУдаления() Тогда
            Продолжить;
        КонецЕсли;       
        
        ТекущийЭлементНоменклатуры = СправочникНоменклатура.ТекущийЭлемент();
        СтруктураНоменклатуры = СтруктураНоменклатуры();
        СтруктураНоменклатуры.Наименование = ТекущийЭлементНоменклатуры.Наименование;
		СтруктураНоменклатуры.ИД77 = Сервер77.ЗначениеВСтрокуВнутр(ТекущийЭлементНоменклатуры);
        Если ТекущийЭлементНоменклатуры.ЭтоДороги = 1 Тогда
        	СтруктураНоменклатуры.ЭтоДороги = Истина;
        КонецЕсли;
		СтруктураНоменклатуры.ИДБелтол = ТекущийЭлементНоменклатуры.ИДБелтол;
		СтруктураНоменклатуры.ИДБеларусьнефть = ТекущийЭлементНоменклатуры.ИДБеларусьнефть;
		СтруктураНоменклатуры.ИДТранзиткарт = ТекущийЭлементНоменклатуры.ИДТранзиткарт;
		СтруктураНоменклатуры.ИДТатнефть = ТекущийЭлементНоменклатуры.ИДТатнефть;
		СтруктураНоменклатуры.ИДЛукойл = ТекущийЭлементНоменклатуры.ИДЛукойл;
         
        МассивНоменклатуры.Добавить(СтруктураНоменклатуры);
    КонецЦикла;
  	СоздатьНоменклатуру(МассивНоменклатуры);
  	ОбщегоНазначенияКлиент.СообщитьПользователю("Номенклатура загружена");
КонецПроцедуры

// Структура номенклатуры.
// 
// Возвращаемое значение:
//  Структура - Структура номенклатуры:
// * Наименование - Строка
// * ИД77 - Строка 
// * ЭтоДороги - Булево
// * ИДБелтол - Строка
// * ИДБеларусьнефть - Строка 
// * ИДТранзиткарт - Строка
// * ИДТатнефть - Строка
// * ИДЛукойл - Строка
&НаКлиенте
Функция СтруктураНоменклатуры()
	Структура = Новый Структура();
	Структура.Вставить("Наименование", "");
	Структура.Вставить("ИД77", "");
	Структура.Вставить("ЭтоДороги", Ложь);
	Структура.Вставить("ИДБелтол", "");
	Структура.Вставить("ИДБеларусьнефть", "");
	Структура.Вставить("ИДТранзиткарт", "");
	Структура.Вставить("ИДТатнефть", "");
	Структура.Вставить("ИДЛукойл", "");
		
	Возврат Структура;	
КонецФункции

// Создать номенклатуру.
// 
// Параметры:
//  МассивНоменклатуры - Массив из См. СтруктураНоменклатуры() 
&НаСервере
Процедура СоздатьНоменклатуру(МассивНоменклатуры)
	Для Каждого ЭлементМассива Из МассивНоменклатуры Цикл
		НоменклатураСсылка = Справочники.Номенклатура.НайтиПоРеквизиту("Идентификатор77", ЭлементМассива.ИД77);
		Если ЗначениеЗаполнено(НоменклатураСсылка) Тогда
			НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
		Иначе
			НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
			НоменклатураОбъект.Идентификатор77 = ЭлементМассива.ИД77;	
		КонецЕсли;
		НоменклатураОбъект.ЭтоДороги = ЭлементМассива.ЭтоДороги;
		НоменклатураОбъект.Наименование = ЭлементМассива.Наименование;
		НоменклатураОбъект.НаименованиеПолное = ЭлементМассива.Наименование;
		НоменклатураОбъект.ЭтоДороги = ЭлементМассива.ЭтоДороги; 
		
		МассивИД = Новый Массив;
		МассивИД.Добавить("ИДБелтол");
		МассивИД.Добавить("ИДБеларусьнефть");
		МассивИД.Добавить("ИДТранзиткарт");
		МассивИД.Добавить("ИДТатнефть");
		МассивИД.Добавить("ИДЛукойл");
		
		Для Каждого ТекущийИД Из МассивИД Цикл
			Если Не ПустаяСтрока(ЭлементМассива[ТекущийИД]) Тогда
				СтрокаПоиска = НоменклатураОбъект.ИдентификаторыКодовПоставщиков.Найти(ТекущийИД, "Комментарий77");
				Если СтрокаПоиска = Неопределено Тогда
					НоваяСтрокаИД = НоменклатураОбъект.ИдентификаторыКодовПоставщиков.Добавить();
					НоваяСтрокаИД.Комментарий77 = ТекущийИД;
					НоваяСтрокаИД.ИД = ЭлементМассива[ТекущийИД]; 
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		НоменклатураОбъект.Записать();	
	КонецЦикла;	
КонецПроцедуры
#КонецОбласти

#Область ЗагрузкаМестТранзакций

&НаКлиенте
Процедура ЗагрузкаМестТранзакции(Команда)
	СправочникМестаТранзакций = Сервер77.CreateObject("Справочник.МестоТранзакции");
	СправочникМестаТранзакций.ВыбратьЭлементы();
	
	МассивСтруктур = Новый Массив;

	Периодический77 = Сервер77.CreateObject("Периодический");
	
	Счетчик = 0;
	Пока СправочникМестаТранзакций.ПолучитьЭлемент() = 1 Цикл
		Счетчик = Счетчик + 1;
		//Если Счетчик >= 30 Тогда
		//	Прервать;
		//КонецЕсли;	
		ТекущееМестоТранзакции = СправочникМестаТранзакций.ТекущийЭлемент();
		ТекущийРодитель = ТекущееМестоТранзакции.Родитель;
		
		СтруктураМестаТранзакции = СтруктураМестаТранзакции();
		СтруктураМестаТранзакции.Наименование = СправочникМестаТранзакций.Наименование;
		СтруктураМестаТранзакции.ИД77 = Сервер77.ЗначениеВСтрокуВнутр(ТекущееМестоТранзакции);
		СтруктураМестаТранзакции.ИД77Родитель = Сервер77.ЗначениеВСтрокуВнутр(ТекущийРодитель);
		СтруктураМестаТранзакции.КодУчета = ТекущееМестоТранзакции.КодУчета;
		Если СправочникМестаТранзакций.ЭтоГруппа() = 1 Тогда
			СтруктураМестаТранзакции.ЭтоГруппа = Истина;
		КонецЕсли;	
		
		Если СправочникМестаТранзакций.ПометкаУдаления() = 1 Тогда
			СтруктураМестаТранзакции.ПометкаУдаления = Истина;
		КонецЕсли;
		
		Если СтруктураМестаТранзакции.ЭтоГруппа Тогда 
			Периодический77.ИспользоватьОбъект("Скидка", ТекущееМестоТранзакции);
			Периодический77.Выбратьзначения();
			Пока Периодический77.ПолучитьЗначение() = 1 Цикл
				ИДСкидки = Сервер77.ЗначениеВСтрокуВнутр(Периодический77.Значение);			
				
				ЗначениеИстории = СтруктураИсторияСкидокМестаТранзакции();
				ЗначениеИстории.ДатаЗначения = Периодический77.ДатаЗнач;
				ЗначениеИстории.Скидка = ИДСкидки;
				СтруктураМестаТранзакции.ИсторияСкидок.Добавить(ЗначениеИстории); 
			КонецЦикла;
		КонецЕсли;	
		
		Если Не СтруктураМестаТранзакции.ЭтоГруппа Тогда 
			Периодический77.ИспользоватьОбъект("флВыделятьВФактуре", ТекущееМестоТранзакции);
			Периодический77.Выбратьзначения();
			Пока Периодический77.ПолучитьЗначение() = 1 Цикл
				ЗначениеИстории = СтруктураИсторияВыделятьВФактуреМестоТранзакции();
				ЗначениеИстории.ДатаЗначения = Периодический77.ДатаЗнач;
				Если Периодический77.Значение = 1 Тогда
					ЗначениеИстории.ВыделятьВФактуре = Истина;
				КонецЕсли;
				СтруктураМестаТранзакции.ИсторияВыделятьВФактуре.Добавить(ЗначениеИстории);
			КонецЦикла;
		КонецЕсли;	
		МассивСтруктур.Добавить(СтруктураМестаТранзакции);
	КонецЦикла;
	ЗагрузитьМестаТранзакции(МассивСтруктур);	
	ОбщегоНазначенияКлиент.СообщитьПользователю("Места транзакции загружены");
КонецПроцедуры

// Загрузить места транзакции.
// 
// Параметры:
//  МассивСтруктурМестТранзакций - Массив из См.СтруктураМестаТранзакции
&НаСервере
Процедура ЗагрузитьМестаТранзакции(МассивСтруктурМестТранзакций)
	Для Каждого МестоТранзакции Из МассивСтруктурМестТранзакций Цикл
		МестоТранзакцииСсылка = Справочники.МестаТранзакции.НайтиПоРеквизиту("Идентификатор77", МестоТранзакции.ИД77);
		Если ЗначениеЗаполнено(МестоТранзакцииСсылка) Тогда
			МестоТранзакцииОбъект = МестоТранзакцииСсылка.ПолучитьОбъект();
		Иначе
			Если МестоТранзакции.ЭтоГруппа Тогда
				МестоТранзакцииОбъект = Справочники.МестаТранзакции.СоздатьГруппу();
			Иначе
				МестоТранзакцииОбъект = Справочники.МестаТранзакции.СоздатьЭлемент();
			КонецЕсли;
		КонецЕсли;
		МестоТранзакцииОбъект.Идентификатор77 = МестоТранзакции.ИД77;
		Если ЗначениеЗаполнено(МестоТранзакции.ИД77Родитель) Тогда
			МестоТранзакцииОбъект.Родитель = Справочники.МестаТранзакции.НайтиПоРеквизиту("Идентификатор77",
				МестоТранзакции.ИД77Родитель);
		КонецЕсли;
		МестоТранзакцииОбъект.Наименование		= МестоТранзакции.Наименование;
		МестоТранзакцииОбъект.КодУчета			= МестоТранзакции.КодУчета;
		МестоТранзакцииОбъект.ПометкаУдаления	= МестоТранзакции.ПометкаУдаления; 
		МестоТранзакцииОбъект.Записать();

		Для Каждого ЭлементИстории Из МестоТранзакции.ИсторияСкидок Цикл
			МенеджерЗаписи = РегистрыСведений.СкидкиМестТранзакций.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период			= ЭлементИстории.ДатаЗначения;
			МенеджерЗаписи.МестоТранзации	= МестоТранзакцииОбъект.Ссылка;
			МенеджерЗаписи.Скидка			= Справочники.Скидки.НайтиПоРеквизиту("Идентификатор77", ЭлементИстории.Скидка);
			МенеджерЗаписи.Записать();
		КонецЦикла;
		Для Каждого ЭлементИстории Из МестоТранзакции.ИсторияВыделятьВФактуре Цикл
			МенеджерЗаписи = РегистрыСведений.СвойстваМестТранзакций.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период			= ЭлементИстории.ДатаЗначения;
			МенеджерЗаписи.МестоТранзакции	= МестоТранзакцииОбъект.Ссылка;
			МенеджерЗаписи.ВыделятьВФактуре = ЭлементИстории.ВыделятьВФактуре;
			МенеджерЗаписи.Записать();
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Структура история скидок места транзакции.
// 
// Возвращаемое значение:
//  Структура - Структура история скидок места транзакции:
// * Скидка - СправочникСсылка.Скидки 
// * ДатаЗначения - Дата 
&НаКлиенте
Функция СтруктураИсторияСкидокМестаТранзакции()
	
	Структура = Новый Структура();
	Структура.Вставить("Скидка", ПредопределенноеЗначение("Справочник.Скидки.ПустаяСсылка"));
	Структура.Вставить("ДатаЗначения", Дата(1, 1, 1));
	
	Возврат Структура;
	
КонецФункции

// Структура история выделять в фактуре место транзакции.
// 
// Возвращаемое значение:
//  Структура - Структура история выделять в фактуре место транзакции:
// * ВыделятьВФактуре - Булево 
// * ДатаЗначения - Дата 
&НаКлиенте
Функция СтруктураИсторияВыделятьВФактуреМестоТранзакции()
	
	Структура = Новый Структура();
	Структура.Вставить("ВыделятьВФактуре", Ложь);
	Структура.Вставить("ДатаЗначения", Дата(1, 1, 1));
	
	Возврат Структура;
	
КонецФункции	

// Структура места транзакции.
// 
// Возвращаемое значение:
//  Структура - Структура места транзакции:
// * Наименование - Строка
// * ИД77 - Строка
// * ИД77Родитель - Строка   
// * ЭтоГруппа - Булево
// * ПометкаУдаления - Булево 
// * КодУчета - Строка
// * ИсторияСкидок - Массив из См. СтруктураИсторияСкидокМестаТранзакции()  
// * ИсторияВыделятьВФактуре - Массив из См. СтруктураИсторияВыделятьВФактуреМестоТранзакции() 
&НаКлиенте
Функция СтруктураМестаТранзакции()
	Структура = Новый Структура();
	Структура.Вставить("Наименование", "");
	Структура.Вставить("ИД77", "");
	Структура.Вставить("ИД77Родитель", "");
	Структура.Вставить("ЭтоГруппа", Ложь);
	Структура.Вставить("КодУчета", "");
	Структура.Вставить("ИсторияСкидок", Новый Массив);
	Структура.Вставить("ИсторияВыделятьВФактуре", Новый Массив);
	Структура.Вставить("ПометкаУдаления", Ложь);
	
	Возврат Структура;	
КонецФункции	

#КонецОбласти

#Область ЗагрузкаСкидок

&НаКлиенте
Процедура ЗагрузкаСкидок(Команда)
	СправочникСкидки = Сервер77.CreateObject("Справочник.Скидки");
	СправочникСкидки.ВыбратьЭлементы();
	
	МассивСтруктур = Новый Массив;

	Периодический77 = Сервер77.CreateObject("Периодический");
	
	Пока СправочникСкидки.ПолучитьЭлемент() = 1 Цикл
		ТекущаяСкидка77 = СправочникСкидки.ТекущийЭлемент();
		
		СтруктураСкидки = СтруктураСкидки();
		СтруктураСкидки.Наименование = СправочникСкидки.Наименование;
		СтруктураСкидки.ИД77 = Сервер77.ЗначениеВСтрокуВнутр(ТекущаяСкидка77);
		Если СправочникСкидки.ПометкаУдаления() = 1 Тогда
			СтруктураСкидки.ПометкаУдаления = Истина;
		КонецЕсли;
		
		Периодический77.ИспользоватьОбъект("Значение", ТекущаяСкидка77);
		Периодический77.выбратьзначения();
		Пока Периодический77.ПолучитьЗначение() = 1 Цикл
			ЗначениеИстории = СтруктураИсторииСкидки();
			ЗначениеИстории.ДатаЗначения = Периодический77.ДатаЗнач;
			ЗначениеИстории.ЗначениеСкидки = Периодический77.Значение;
			СтруктураСкидки.ИсторияЗначений.Добавить(ЗначениеИстории); 
		КонецЦикла;
		МассивСтруктур.Добавить(СтруктураСкидки);
	КонецЦикла;
	ЗагрузитьСкидкиНаСервере(МассивСтруктур);
	ОбщегоНазначенияКлиент.СообщитьПользователю("Скидки загружены");	 	
КонецПроцедуры

// Загрузить скидки на сервере.
// 
// Параметры:
//  МассивСтруктурСкидок - Массив из См. СтруктураСкидки 
&НаСервере
Процедура ЗагрузитьСкидкиНаСервере(МассивСтруктурСкидок)
	
	Для Каждого Скидка Из МассивСтруктурСкидок Цикл
		СкидкаСсылка = Справочники.Скидки.НайтиПоРеквизиту("Идентификатор77", Скидка.ИД77);
		Если ЗначениеЗаполнено(СкидкаСсылка) Тогда
			СкидкаОбъект = СкидкаСсылка.ПолучитьОбъект();
		Иначе
			СкидкаОбъект = Справочники.Скидки.СоздатьЭлемент();
			СкидкаОбъект.Идентификатор77 = Скидка.ИД77;
		КонецЕсли;
		СкидкаОбъект.Наименование = Скидка.Наименование;
		СкидкаОбъект.Записать();
		
		Для Каждого ЗначениеИстории Из Скидка.ИсторияЗначений Цикл
			МенеджерЗаписи = РегистрыСведений.ЗначенияСкидок.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Скидка = СкидкаОбъект.Ссылка;
			МенеджерЗаписи.Период = ЗначениеИстории.ДатаЗначения;
			МенеджерЗаписи.ЗначениеСкидки = ЗначениеИстории.ЗначениеСкидки;
			МенеджерЗаписи.Записать();
		КонецЦикла;	
	КонецЦикла;	
	
КонецПроцедуры	

// Структура истории скидки.
// 
// Возвращаемое значение:
//  Структура - Структура истории скидки:
// * ДатаЗначения - Дата  
// * ЗначениеСкидки - Число 
&НаКлиенте
Функция СтруктураИсторииСкидки()
	Структура = Новый Структура();
	Структура.Вставить("ДатаЗначения", Дата(1, 1, 1));
	Структура.Вставить("ЗначениеСкидки", 0);
	
	Возврат Структура;
КонецФункции	

// Структура скидки.
// 
// Возвращаемое значение:
//  Структура - Структура скидки:
// * Наименование - Строка
// * ИД77 - Строка 
// * ПометкаУдаления - Булево 
// * ИсторияЗначений - Массив из  См. СтруктураИсторииСкидки 
&НаКлиенте
Функция СтруктураСкидки()
	СтруктураСкидки = Новый Структура();
	СтруктураСкидки.Вставить("Наименование", "");
	СтруктураСкидки.Вставить("ИД77", "");
	СтруктураСкидки.Вставить("ПометкаУдаления", Ложь);
	СтруктураСкидки.Вставить("ИсторияЗначений", Новый Массив);
	
	Возврат СтруктураСкидки
КонецФункции	

#КонецОбласти

#Область Контрагенты

&НаКлиенте
Процедура ЗагрузкаКонтрагентов(Команда)
	
	#Область ИмпортКлиентов
	СправочникКлиенты = Сервер77.CreateObject("Справочник.Клиенты");
	СправочникКлиенты.ВыбратьЭлементы();
	
	МассивСтруктур = Новый Массив;

	Периодический77 = Сервер77.CreateObject("Периодический");
	
	Пока СправочникКлиенты.ПолучитьЭлемент() = 1 Цикл
		ТекущийКлиент77 = СправочникКлиенты.ТекущийЭлемент();
		Если ТекущийКлиент77.ЭтоГруппа() = 1 Тогда
			Продолжить;
		КонецЕсли;	
		
		СтруктураКонтрагента = СтруктураКлиента();
		СтруктураКонтрагента.Наименование		= СокрЛП(ТекущийКлиент77.Наименование);
		СтруктураКонтрагента.ПолноеНаименование = СокрЛП(ТекущийКлиент77.ПолучитьАтрибут("ПолноеНаименование"));
		СтруктураКонтрагента.АдресЮридический	= СокрЛП(ТекущийКлиент77.АдресЮридический);
		СтруктураКонтрагента.АдресПочтовый		= СокрЛП(ТекущийКлиент77.АдресПочтовый);
		СтруктураКонтрагента.НИП				= СокрЛП(ТекущийКлиент77.НИП);
		СтруктураКонтрагента.ПочтовыйКод		= СокрЛП(ТекущийКлиент77.ПочтовыйКод);
		СтруктураКонтрагента.ЮридическийКод		= СокрЛП(ТекущийКлиент77.ПочтовыйКод1);
		СтруктураКонтрагента.Телефон			= СокрЛП(ТекущийКлиент77.Телефон);
		СтруктураКонтрагента.Емэйл				= СокрЛП(ТекущийКлиент77.емаил);
		СтруктураКонтрагента.ПутьДляВыгрузки	= СокрЛП(ТекущийКлиент77.ПутьДляВыгрузки);
		СтруктураКонтрагента.Логин				= СокрЛП(ТекущийКлиент77.Логин); 
		СтруктураКонтрагента.ТелефонДляСМС		= СокрЛП(ТекущийКлиент77.ТелДляСМС);  
		СтруктураКонтрагента.ИД77				= Сервер77.ЗначениеВСтрокуВнутр(ТекущийКлиент77);
		СтруктураКонтрагента.ЭтоКлиент			= Истина;
		Если ТекущийКлиент77.ПометкаУдаления() = 1 Тогда
			СтруктураКонтрагента.ПометкаУдаления = Истина;
		КонецЕсли;
		Если ТекущийКлиент77.ЭтоГруппа() = 1 Тогда
			СтруктураКонтрагента.ЭтоГруппа = Истина;
		КонецЕсли;
		
		Если Не СтруктураКонтрагента.ЭтоГруппа Тогда 
			Периодический77.ИспользоватьОбъект("Скидка", ТекущийКлиент77);
			Периодический77.ВыбратьЗначения();
			Пока Периодический77.ПолучитьЗначение() = 1 Цикл
				ЗначениеИстории = СтруктураСкидкиКлиента();
				ЗначениеИстории.ДатаЗначения = Периодический77.ДатаЗнач;
				ЗначениеИстории.ИДСкидка77 = Сервер77.ЗначениеВСтрокуВнутр(Периодический77.Значение);
				СтруктураКонтрагента.ИсторияСкидки.Добавить(ЗначениеИстории); 
			КонецЦикла;
			Периодический77.ИспользоватьОбъект("флНеУчитыватьОсобыеУсловия", ТекущийКлиент77);
			Периодический77.ВыбратьЗначения();
			Пока Периодический77.ПолучитьЗначение() = 1 Цикл
				ЗначениеИстории = СтруктураНеУчитыватьОсобыеУсловия();
				ЗначениеИстории.ДатаЗначения = Периодический77.ДатаЗнач;
				Если Периодический77.Значение = 1 Тогда 
					ЗначениеИстории.НеУчитыватьОсобыеУсловия = Истина;
				КонецЕсли;	
				СтруктураКонтрагента.ИсторияНеУчитыватьОсобыеУсловия.Добавить(ЗначениеИстории); 
			КонецЦикла;
		КонецЕсли;	
		МассивСтруктур.Добавить(СтруктураКонтрагента);
	КонецЦикла;
	ЗагрузитьКлиентовНаСервере(МассивСтруктур);
	ОбщегоНазначенияКлиент.СообщитьПользователю("Клиенты загружены");
	#КонецОбласти
	
	#Область ИмпортПоставщиков
	СправочникПоставщики = Сервер77.CreateObject("Справочник.Поставщики");
	СправочникПоставщики.ВыбратьЭлементы();
	
	МассивСтруктур = Новый Массив;

	Пока СправочникПоставщики.ПолучитьЭлемент() = 1 Цикл
		ТекущийКлиент77 = СправочникПоставщики.ТекущийЭлемент();
		Если ТекущийКлиент77.ЭтоГруппа() = 1 Тогда
			Продолжить;
		КонецЕсли;	
		
		СтруктураКонтрагента = СтруктураКлиента();
		СтруктураКонтрагента.Наименование		= СокрЛП(ТекущийКлиент77.Наименование);
		СтруктураКонтрагента.ПолноеНаименование = СокрЛП(ТекущийКлиент77.ПолучитьАтрибут("ПолноеНаименование"));
		СтруктураКонтрагента.АдресЮридический	= СокрЛП(ТекущийКлиент77.АдресЮридический);
		СтруктураКонтрагента.АдресПочтовый		= СокрЛП(ТекущийКлиент77.АдресПочтовый);
		СтруктураКонтрагента.НИП				= СокрЛП(ТекущийКлиент77.НИП);
		СтруктураКонтрагента.ПочтовыйКод		= СокрЛП(ТекущийКлиент77.ПочтовыйКод);
		СтруктураКонтрагента.ЮридическийКод		= СокрЛП(ТекущийКлиент77.ПочтовыйКод1);
		СтруктураКонтрагента.Телефон			= СокрЛП(ТекущийКлиент77.Телефон);
		СтруктураКонтрагента.ИД77				= Сервер77.ЗначениеВСтрокуВнутр(ТекущийКлиент77);
		СтруктураКонтрагента.ЭтоКлиент			= Ложь;
		СтруктураКонтрагента.ЭтоПоставщик		= Истина;
		Если ТекущийКлиент77.ПометкаУдаления() = 1 Тогда
			СтруктураКонтрагента.ПометкаУдаления = Истина;
		КонецЕсли;
		Если ТекущийКлиент77.ЭтоГруппа() = 1 Тогда
			СтруктураКонтрагента.ЭтоГруппа = Истина;
		КонецЕсли;
				
		МассивСтруктур.Добавить(СтруктураКонтрагента);
	КонецЦикла;
	ЗагрузитьКлиентовНаСервере(МассивСтруктур);
	ОбщегоНазначенияКлиент.СообщитьПользователю("Поставщики загружены");
	#КонецОбласти
КонецПроцедуры

// Загрузить клиентов на сервере.
// 
// Параметры:
//  МассивСтруктур - Массив из См. СтруктураКлиента()
&НаСервере
Процедура ЗагрузитьКлиентовНаСервере(МассивСтруктур)
	Для Каждого Контрагент Из МассивСтруктур Цикл
		Если Контрагент.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;	 
		
		КонтрагентСсылка = Справочники.Контрагенты.НайтиПоРеквизиту("Идентификатор77", Контрагент.ИД77);
		Если ЗначениеЗаполнено(КонтрагентСсылка) Тогда
			КонтрагентОбъект = КонтрагентСсылка.ПолучитьОбъект();
		Иначе
			КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
			КонтрагентОбъект.Идентификатор77 = Контрагент.ИД77;	
		КонецЕсли;
		КонтрагентОбъект.Наименование		= Контрагент.Наименование;
		КонтрагентОбъект.НаименованиеПолное = Контрагент.ПолноеНаименование;
		КонтрагентОбъект.ПочтовыйКод		= Контрагент.ПочтовыйКод;
		КонтрагентОбъект.ЮридическийКод		= Контрагент.ЮридическийКод;
		КонтрагентОбъект.ПутьДляВыгрузки	= Контрагент.ПутьДляВыгрузки;
		КонтрагентОбъект.Логин				= Контрагент.Логин;
		КонтрагентОбъект.ЭтоКлиент			= Контрагент.ЭтоКлиент;
		КонтрагентОбъект.ЭтоПоставщик		= Контрагент.ЭтоПоставщик;
		КонтрагентОбъект.ПометкаУдаления	= Контрагент.ПометкаУдаления;
		КонтрагентОбъект.ПутьДляВыгрузки	= Контрагент.ПутьДляВыгрузки;
		
		КонтрагентОбъект.КонтактнаяИнформация.Очистить();
		
		//Юридически адрес
		Если Не ПустаяСтрока(Контрагент.АдресЮридический) Тогда
			НоваяСтрокаКИ = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
			НоваяСтрокаКИ.Тип			= Перечисления.ТипыКонтактнойИнформации.Адрес;
			НоваяСтрокаКИ.Вид			= Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
			НоваяСтрокаКИ.Представление = Контрагент.АдресЮридический;
		КонецЕсли;	
		
		//Почтовый адрес
		Если Не ПустаяСтрока(Контрагент.АдресПочтовый) Тогда
			НоваяСтрокаКИ = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
			НоваяСтрокаКИ.Тип			= Перечисления.ТипыКонтактнойИнформации.Адрес;
			НоваяСтрокаКИ.Вид			= Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
			НоваяСтрокаКИ.Представление = Контрагент.АдресПочтовый;
		КонецЕсли;
		
		//Телефон
		Если Не ПустаяСтрока(Контрагент.Телефон) Тогда
			НоваяСтрокаКИ = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
			НоваяСтрокаКИ.Тип			= Перечисления.ТипыКонтактнойИнформации.Телефон;
			НоваяСтрокаКИ.Вид			= Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
			НоваяСтрокаКИ.Представление = Контрагент.Телефон;
			НоваяСтрокаКИ.НомерТелефона = Контрагент.Телефон;
		КонецЕсли;	
		
		//Телефон для СМС
		Если Не ПустаяСтрока(Контрагент.ТелефонДляСМС) Тогда
			НоваяСтрокаКИ = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
			НоваяСтрокаКИ.Тип			= Перечисления.ТипыКонтактнойИнформации.Телефон;
			НоваяСтрокаКИ.Вид			= Справочники.ВидыКонтактнойИнформации.ТелефонДляСМС;
			НоваяСтрокаКИ.Представление = Контрагент.ТелефонДляСМС;
			НоваяСтрокаКИ.НомерТелефона = Контрагент.ТелефонДляСМС;
		КонецЕсли;
		
		//Почта
		Если Не ПустаяСтрока(Контрагент.Емэйл) Тогда
			НоваяСтрокаКИ = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
			НоваяСтрокаКИ.Тип			= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			НоваяСтрокаКИ.Вид			= Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты;
			НоваяСтрокаКИ.Представление = Контрагент.Емэйл;
			НоваяСтрокаКИ.АдресЭП		= Контрагент.Емэйл;
		КонецЕсли; 
		
		Если КонтрагентОбъект.ЭтоКлиент Тогда
			КонтрагентОбъект.Родитель = Справочники.Контрагенты.Клиенты;
		КонецЕсли;
		Если КонтрагентОбъект.ЭтоПоставщик Тогда
			КонтрагентОбъект.Родитель = Справочники.Контрагенты.Поставщики;
		КонецЕсли;
		КонтрагентОбъект.Записать();
		
		Для Каждого ЭлементИстории Из Контрагент.ИсторияСкидки Цикл
			МенеджерЗаписи = РегистрыСведений.СкидкиКонтрагентов.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Контрагент	= КонтрагентОбъект.Ссылка;
			МенеджерЗаписи.Скидка		= Справочники.Скидки.НайтиПоРеквизиту("Идентификатор77", ЭлементИстории.ИДСкидка77);
			МенеджерЗаписи.Период		= ЭлементИстории.ДатаЗначения;
			МенеджерЗаписи.Записать(Истина);
		КонецЦикла;	
		
		Для Каждого ЭлементИстории Из Контрагент.ИсторияНеУчитыватьОсобыеУсловия Цикл	
			МенеджерЗаписи = РегистрыСведений.ОсобыеУсловияКонтрагентов.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Контрагент					= КонтрагентОбъект.Ссылка;
			МенеджерЗаписи.НеИспользоватьОсобыеУсловия	= ЭлементИстории.НеУчитыватьОсобыеУсловия;
			МенеджерЗаписи.Период						= ЭлементИстории.ДатаЗначения;
			МенеджерЗаписи.Записать(Истина);
		КонецЦикла;	 
			
	КонецЦикла;	
КонецПроцедуры	

// Структура клиента.
// 
// Возвращаемое значение:
//  Структура - Структура клиента:
// * ИД77 - Строка - 
// * Наименование - Строка - 
// * ПолноеНаименование - Строка - 
// * АдресЮридический - Строка - 
// * АдресПочтовый - Строка - 
// * ПочтовыйКод - Строка - 
// * ЮридическийКод - Строка - 
// * Телефон - Строка - 
// * ТелефонДляСМС - Строка - 
// * Емэйл - Строка - 
// * ПутьДляВыгрузки - Строка - 
// * Логин - Строка - 
// * НИП - Строка -
// * ЭтоКлиент - Булево -
// * ЭтоПоставщик - Булево -
// * ИсторияСкидки - Массив из См. СтруктураСкидкиКлиента()
// * ИсторияНеУчитыватьОсобыеУсловия -Массив из См. СтруктураНеУчитыватьОсобыеУсловия()
// * ПометкаУдаления - Булево
// * ЭтоГруппа - Булево 
&НаКлиенте
Функция СтруктураКлиента()
	Структура = Новый Структура();
	Структура.Вставить("ИД77", "");
	Структура.Вставить("Наименование", "");
	Структура.Вставить("ПолноеНаименование", "");
	Структура.Вставить("АдресЮридический", "");
	Структура.Вставить("АдресПочтовый", "");
	Структура.Вставить("ПочтовыйКод", "");
	Структура.Вставить("ЮридическийКод", "");
	Структура.Вставить("Телефон", "");
	Структура.Вставить("ТелефонДляСМС", "");
	Структура.Вставить("Емэйл", "");
	Структура.Вставить("ПутьДляВыгрузки", "");
	Структура.Вставить("Логин", "");
	Структура.Вставить("НИП", "");
	Структура.Вставить("ЭтоКлиент", Ложь);
	Структура.Вставить("ЭтоПоставщик", Ложь);
	Структура.Вставить("ИсторияСкидки", Новый Массив);
	Структура.Вставить("ИсторияНеУчитыватьОсобыеУсловия", Новый Массив);
	Структура.Вставить("ПометкаУдаления", Ложь);
	Структура.Вставить("ЭтоГруппа", Ложь);
	
	Возврат Структура;
	
КонецФункции

// Структура скидки клиента.
// 
// Возвращаемое значение:
//  Структура - Структура скидки клиента:
// * ДатаЗначения - Дата - 
// * ИДСкидка77 - Строка - 
&НаКлиенте
Функция СтруктураСкидкиКлиента()
	Структура = Новый Структура();
	Структура.Вставить("ДатаЗначения", Дата(1, 1, 1));
	Структура.Вставить("ИДСкидка77", "");
	
	Возврат Структура;	
КонецФункции	 

// Структура не учитывать особые условия.
// 
// Возвращаемое значение:
//  Структура - Структура не учитывать особые условия:
// * ДатаЗначения - Дата - 
// * НеУчитыватьОсобыеУсловия - Булево - 
&НаКлиенте
Функция СтруктураНеУчитыватьОсобыеУсловия()
	Структура = Новый Структура();
	Структура.Вставить("ДатаЗначения", Дата(1, 1, 1));
	Структура.Вставить("НеУчитыватьОсобыеУсловия", Ложь);
	
	Возврат Структура;
КонецФункции		

#КонецОбласти

#Область Автомобили 

&НаКлиенте
Процедура ЗагрузкаАвтомобилей(Команда)
	СправочникКлиенты = Сервер77.CreateObject("Справочник.Клиенты");
	СправочникАвтомобили = Сервер77.CreateObject("Справочник.Автомобили");

	МассивСтруктур = Новый Массив;

	СправочникКлиенты.ВыбратьЭлементы();
	Пока СправочникКлиенты.ПолучитьЭлемент() = 1 Цикл
		ТекущийКлиент = СправочникКлиенты.ТекущийЭлемент();
		Если ТекущийКлиент.ЭтоГруппа() = 1 Тогда
			Продолжить;
		КонецЕсли;
		СправочникАвтомобили.ИспользоватьВладельца(ТекущийКлиент);
		СправочникАвтомобили.ВыбратьЭлементы();
		Пока СправочникАвтомобили.ПолучитьЭлемент() = 1 Цикл
			ТекущийАвтомобиль77 = СправочникАвтомобили.ТекущийЭлемент();
			Владелец77 = ТекущийАвтомобиль77.Владелец;

			СтруктураАвтомобиля = СтруктураАвтомобиля();
			СтруктураАвтомобиля.Наименование = СправочникАвтомобили.Наименование;
			СтруктураАвтомобиля.ИД77 = Сервер77.ЗначениеВСтрокуВнутр(ТекущийАвтомобиль77);
			СтруктураАвтомобиля.Владелец77 = Сервер77.ЗначениеВСтрокуВнутр(Владелец77);
			СтруктураАвтомобиля.НомерБелтол = СправочникАвтомобили.НомерБелтол;
			Если ТекущийАвтомобиль77.ЭтоГруппа() = 1 Тогда
				СтруктураАвтомобиля.ЭтоГруппа = Истина;
			КонецЕсли;
			Если СправочникАвтомобили.ПометкаУдаления() = 1 Тогда
				СтруктураАвтомобиля.ПометкаУдаления = Истина;
			КонецЕсли;

			МассивСтруктур.Добавить(СтруктураАвтомобиля);
		КонецЦикла;

	КонецЦикла;

	ЗагрузитьАвтомобилиНаСервере(МассивСтруктур);
	ОбщегоНазначенияКлиент.СообщитьПользователю("Автомобили загружены");
КонецПроцедуры

// Загрузить автомобили на сервере.
// 
// Параметры:
//  МассивСтруктур - Массив Из См. СтруктураАвтомобиля() 
&НаСервере
Процедура ЗагрузитьАвтомобилиНаСервере(МассивСтруктур)
	Для Каждого Автомобиль Из МассивСтруктур Цикл
		АвтомобильСсылка = Справочники.Автомобили.НайтиПоРеквизиту("Идентификатор77", Автомобиль.ИД77);
		Если ЗначениеЗаполнено(АвтомобильСсылка) Тогда
			АвтомобильОбъект = АвтомобильСсылка.ПолучитьОбъект();
		Иначе
			АвтомобильОбъект = Справочники.Автомобили.СоздатьЭлемент();
			АвтомобильОбъект.Идентификатор77 = Автомобиль.ИД77; 
		КонецЕсли;
		АвтомобильОбъект.Наименование		= Автомобиль.Наименование;
		АвтомобильОбъект.НомерБелтол		= Автомобиль.НомерБелтол;
		АвтомобильОбъект.Владелец			= Справочники.Контрагенты.НайтиПоРеквизиту("Идентификатор77", Автомобиль.Владелец77);
		АвтомобильОбъект.ПометкаУдаления	= Автомобиль.ПометкаУдаления;
		АвтомобильОбъект.Записать();		
	КонецЦикла;	 		
КонецПроцедуры	

// Структура автомобиля.
// 
// Возвращаемое значение:
//  Структура - Структура автомобиля:
// * ИД77 - Строка - 
// * Владелец77 - Строка - 
// * Наименование - Строка - 
// * НомерБелтол - Строка - 
// * ЭтоГруппа - Булево -
// * ПометкаУдаления - Булево -
&НаКлиенте
Функция СтруктураАвтомобиля()
	Структура = Новый Структура();
	Структура.Вставить("ИД77", "");
	Структура.Вставить("Владелец77", "");
	Структура.Вставить("Наименование", "");
	Структура.Вставить("НомерБелтол", "");
	Структура.Вставить("ЭтоГруппа", Ложь);
	Структура.Вставить("ПометкаУдаления", Ложь);
	
	Возврат Структура;
КонецФункции	

#КонецОбласти

#Область Карточки 

&НаКлиенте
Процедура ЗагрузкаКарточек(Команда)
	
	Периодический77 = Сервер77.CreateObject("Периодический");
	
	СправочникКлиенты = Сервер77.CreateObject("Справочник.Клиенты");
	СправочникКарточки = Сервер77.CreateObject("Справочник.Карточки");

	МассивСтруктур = Новый Массив;
	
	СправочникКлиенты.ВыбратьЭлементы();
	Пока СправочникКлиенты.ПолучитьЭлемент() = 1 Цикл
		ТекущийКлиент = СправочникКлиенты.ТекущийЭлемент();
		Если ТекущийКлиент.ЭтоГруппа() = 1 Тогда
			Продолжить;
		КонецЕсли;
		СправочникКарточки.ИспользоватьВладельца(ТекущийКлиент);
		СправочникКарточки.ВыбратьЭлементы();
		Пока СправочникКарточки.ПолучитьЭлемент() = 1 Цикл
			ТекущаяКарта = СправочникКарточки.ТекущийЭлемент();
			Владелец77 = ТекущаяКарта.Владелец;

			СтруктураКарточки = СтруктураКарточки();
			СтруктураКарточки.Наименование					= СокрЛП(СправочникКарточки.Наименование);
			СтруктураКарточки.ИД77							= Сервер77.ЗначениеВСтрокуВнутр(ТекущаяКарта);
			СтруктураКарточки.Владелец77					= Сервер77.ЗначениеВСтрокуВнутр(Владелец77);
			СтруктураКарточки.Пин							= СокрЛП(СправочникКарточки.Пин);
			СтруктураКарточки.ДатаБлокировкиРазблокировки 	= ТекущаяКарта.ДатаБлРазбл;
			Если Сервер77.ЗначениеВСтрокуВнутр(ТекущаяКарта.ПолучитьАтрибут("Блокировка")) = Сервер77.Перечисление.Булево.Да Тогда
				СтруктураКарточки.Блокировка = Истина;
			КонецЕсли;
			Если ТекущаяКарта.Архивная = 1 Тогда
				СтруктураКарточки.Архивная = Истина;
			КонецЕсли;
			Если ТекущаяКарта.ЭтоГруппа() = 1 Тогда
				СтруктураКарточки.ЭтоГруппа = Истина;
			КонецЕсли;
			Если ТекущаяКарта.ПометкаУдаления() = 1 Тогда
				СтруктураКарточки.ПометкаУдаления = Истина;
			КонецЕсли;
			
			Периодический77.ИспользоватьОбъект("АвтомобильСпр", ТекущаяКарта);
			Периодический77.ВыбратьЗначения();
			Пока Периодический77.ПолучитьЗначение() = 1 Цикл
				ЗначениеИстории = СтруктураИсторииАвтомобиль();
				ЗначениеИстории.ДатаЗначения = Периодический77.ДатаЗнач;
				ЗначениеИстории.ИДАвтомобиль77 = Сервер77.ЗначениеВСтрокуВнутр(Периодический77.Значение);
				
				СтруктураКарточки.ИсторияАвтомобиль.Добавить(ЗначениеИстории); 
			КонецЦикла;
			
			Периодический77.ИспользоватьОбъект("Автомобиль", ТекущаяКарта);
			Периодический77.ВыбратьЗначения();
			Пока Периодический77.ПолучитьЗначение() = 1 Цикл
				ЗначениеИстории = СтруктураИсторииАвтомобильСтрока();
				ЗначениеИстории.ДатаЗначения = Периодический77.ДатаЗнач;
				ЗначениеИстории.АтомобильСтрока = СокрЛП(Периодический77.Значение);
				
				СтруктураКарточки.ИсторияАвтомобильСтрока.Добавить(ЗначениеИстории); 
			КонецЦикла;

			МассивСтруктур.Добавить(СтруктураКарточки);
		КонецЦикла;

	КонецЦикла;

	ЗагрузитьКарточкиНаСервере(МассивСтруктур);
	ОбщегоНазначенияКлиент.СообщитьПользователю("Карточки загружены");
КонецПроцедуры

// Загрузить карточки на сервере.
// 
// Параметры:
//  МассивСтруктур - Массив из См. СтруктураКарточки 
&НаСервере
Процедура ЗагрузитьКарточкиНаСервере(МассивСтруктур)
	ОписаниеСтроки = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100));
   	
	Для Каждого Карточка Из МассивСтруктур Цикл
		КарточкаСсылка = Справочники.Карточки.НайтиПоРеквизиту("Идентификатор77", Карточка.ИД77);
		Если НЕ ЗначениеЗаполнено(КарточкаСсылка) Тогда
			КарточкаОбъект = Справочники.Карточки.СоздатьЭлемент();
			КарточкаОбъект.Идентификатор77 = Карточка.ИД77;
		Иначе
			КарточкаОбъект = КарточкаСсылка.ПолучитьОбъект();	
		КонецЕсли;
		КарточкаОбъект.Владелец						= Справочники.Контрагенты.НайтиПоРеквизиту("Идентификатор77", Карточка.Владелец77);
		КарточкаОбъект.Наименование					= Карточка.Наименование;
		КарточкаОбъект.Пин							= Карточка.Пин;
		КарточкаОбъект.ДатаБлокировкиРазблокировки	= Карточка.ДатаБлокировкиРазблокировки;
		КарточкаОбъект.Архивная						= Карточка.Архивная;
		КарточкаОбъект.Блокировка					= Карточка.Блокировка;
		КарточкаОбъект.Записать();
		
		ТаблицаИстории = Новый ТаблицаЗначений();
		ТаблицаИстории.Колонки.Добавить("ДатаЗначения", Новый ОписаниеТипов("Дата", , , , ));
		ТаблицаИстории.Колонки.Добавить("АвтомобильСправочник", Новый ОписаниеТипов("СправочникСсылка.Автомобили", , , , ));
		ТаблицаИстории.Колонки.Добавить("АвтомобильСтрока", ОписаниеСтроки);
		
		Для Каждого ЭлементИстории Из Карточка.ИсторияАвтомобиль Цикл
			НоваяСтрокаИстории = ТаблицаИстории.Добавить();
			НоваяСтрокаИстории.ДатаЗначения = ЭлементИстории.ДатаЗначения;
			НоваяСтрокаИстории.АвтомобильСправочник = Справочники.Автомобили.НайтиПоРеквизиту("Идентификатор77", ЭлементИстории.ИДАвтомобиль77); 
		КонецЦикла;
		Для Каждого ЭлементИстории Из Карточка.ИсторияАвтомобильСтрока Цикл
			НоваяСтрокаИстории = ТаблицаИстории.Добавить();
			НоваяСтрокаИстории.ДатаЗначения = ЭлементИстории.ДатаЗначения;
			НоваяСтрокаИстории.АвтомобильСтрока = ЭлементИстории.АтомобильСтрока; 
		КонецЦикла;
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаИстории", ТаблицаИстории);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаИстории.ДатаЗначения,
		|	ТаблицаИстории.АвтомобильСтрока,
		|	ТаблицаИстории.АвтомобильСправочник
		|ПОМЕСТИТЬ ВТ_История
		|ИЗ
		|	&ТаблицаИстории КАК ТаблицаИстории
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_История.ДатаЗначения КАК ДатаЗначения,
		|	ВТ_История.АвтомобильСтрока КАК АвтомобильСтрока,
		|	ВТ_История.АвтомобильСправочник КАК АвтомобильСправочник
		|ИЗ
		|	ВТ_История КАК ВТ_История
		|ИТОГИ
		|	МАКСИМУМ(АвтомобильСправочник) КАК АвтомобильСправочник,
		|	МАКСИМУМ(АвтомобильСтрока) КАК АвтомобильСтрока
		|ПО
		|	ДатаЗначения";
		
		ВыборкаДата = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ДатаЗначения");
		Пока ВыборкаДата.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.АвтомобилиКарточек.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период			= ВыборкаДата.ДатаЗначения;
			МенеджерЗаписи.Карточка			= КарточкаОбъект.Ссылка;
			МенеджерЗаписи.Автомобиль		= ВыборкаДата.АвтомобильСправочник;
			МенеджерЗаписи.АвтомобильСтрока = ВыборкаДата.АвтомобильСтрока;
			МенеджерЗаписи.Записать();
		КонецЦикла;		
	КонецЦикла;	
КонецПроцедуры	

// Структура карточки.
// 
// Возвращаемое значение:
//  Структура - Структура карточки:
// * Наименование - Строка - 
// * Пин - Строка - 
// * ДатаБлокировкиРазблокировки - Дата - 
// * ИД77 - Строка - 
// * Владелец77 - Строка - 
// * Блокировка - Булево - 
// * ПометкаУдаления - Булево - 
// * ЭтоГруппа - Булево -   
// * Архивная - Булево - 
// * ИсторияАвтомобиль - Массив из См. СтруктураИсторииАвтомобиль() 
// * ИсторияАвтомобильСтрока - Массив  из См. СтруктураИсторииАвтомобильСтрока() 
&НаКлиенте
Функция СтруктураКарточки()
	Структура = Новый Структура();
	Структура.Вставить("ИД77", "");
	Структура.Вставить("Владелец77", "");
	Структура.Вставить("Наименование", "");
	Структура.Вставить("Пин", "");
	Структура.Вставить("ДатаБлокировкиРазблокировки", Дата(1, 1, 1));
	Структура.Вставить("Блокировка", Ложь);
	Структура.Вставить("Архивная", Ложь);
	Структура.Вставить("ИсторияАвтомобиль", Новый Массив);  
	Структура.Вставить("ИсторияАвтомобильСтрока", Новый Массив);
	Структура.Вставить("ПометкаУдаления", Ложь);
	Структура.Вставить("ЭтоГруппа", Ложь);
	
	Возврат Структура;
КонецФункции

// Структура истории автомобиль.
// 
// Возвращаемое значение:
//  Структура - Структура истории автомобиль:
// * ДатаЗначения - Дата - 
// * ИДАвтомобиль77 - Строка - 
&НаКлиенте
Функция СтруктураИсторииАвтомобиль()
	Структура = Новый Структура();
	Структура.Вставить("ДатаЗначения", Дата(1, 1, 1));
	Структура.Вставить("ИДАвтомобиль77", "");
	
	Возврат Структура;

КонецФункции

// Структура истории автомобиль строка.
// 
// Возвращаемое значение:
//  Структура - Структура истории автомобиль строка:
// * ДатаЗначения - Дата - 
// * АтомобильСтрока - Строка - 
&НаКлиенте
Функция СтруктураИсторииАвтомобильСтрока()
	Структура = Новый Структура();
	Структура.Вставить("ДатаЗначения", Дата(1, 1, 1));
	Структура.Вставить("АтомобильСтрока", "");
	
	Возврат Структура;

КонецФункции	

#КонецОбласти

#Область Валюты

&НаКлиенте
Процедура ЗагрузкаВалют(Команда)
	Периодический77 = Сервер77.CreateObject("Периодический");
	
	СправочникВалюты = Сервер77.CreateObject("Справочник.Валюта");
	СправочникВалюты.ВыбратьЭлементы();
	
	Массив = Новый Массив();
	
	Пока СправочникВалюты.ПолучитьЭлемент() = 1 Цикл
		ТекущаяВалюта = СправочникВалюты.ТекущийЭлемент();
		
		СтруктураВалюты = СтруктураВалюты();
		СтруктураВалюты.ИД77 = Сервер77.ЗначениеВСтрокуВнутр(ТекущаяВалюта);
		СтруктураВалюты.Наименование = ТекущаяВалюта.Наименование;
		
		Периодический77.ИспользоватьОбъект("Курс", ТекущаяВалюта);
		Периодический77.ВыбратьЗначения();
		Пока Периодический77.ПолучитьЗначение() = 1 Цикл
			СтруктураИсторииКурса = СтруктураИсторииКурса();
			СтруктураИсторииКурса.ДатаЗначения = Периодический77.ДатаЗнач;
			СтруктураИсторииКурса.Курс = Периодический77.Значение;
			
			СтруктураВалюты.ИсторияКурс.Добавить(СтруктураИсторииКурса);
		КонецЦикла;
			
		Периодический77.ИспользоватьОбъект("КурсВзаиморасчетов", ТекущаяВалюта);
		Периодический77.ВыбратьЗначения();
		Пока Периодический77.ПолучитьЗначение() = 1 Цикл
			СтруктураИсторииКурса = СтруктураИсторииКурса();
			СтруктураИсторииКурса.ДатаЗначения = Периодический77.ДатаЗнач;
			СтруктураИсторииКурса.Курс = Периодический77.Значение;
			
			СтруктураВалюты.ИсторияКурсВзаиморасчетов.Добавить(СтруктураИсторииКурса);
		КонецЦикла;
			
		Периодический77.ИспользоватьОбъект("КурсКЕвро", ТекущаяВалюта);
		Периодический77.ВыбратьЗначения();
		Пока Периодический77.ПолучитьЗначение() = 1 Цикл
			СтруктураИсторииКурса = СтруктураИсторииКурса();
			СтруктураИсторииКурса.ДатаЗначения = Периодический77.ДатаЗнач;
			СтруктураИсторииКурса.Курс = Периодический77.Значение;
			
			СтруктураВалюты.ИсторияКурсКЕвро.Добавить(СтруктураИсторииКурса);
		КонецЦикла;
			
		Периодический77.ИспользоватьОбъект("КурсКДоллару", ТекущаяВалюта);
		Периодический77.ВыбратьЗначения();
		Пока Периодический77.ПолучитьЗначение() = 1 Цикл
			СтруктураИсторииКурса = СтруктураИсторииКурса();
			СтруктураИсторииКурса.ДатаЗначения = Периодический77.ДатаЗнач;
			СтруктураИсторииКурса.Курс = Периодический77.Значение;
			
			СтруктураВалюты.ИсторияКурсКДоллару.Добавить(СтруктураИсторииКурса);
		КонецЦикла;	
		
		Массив.Добавить(СтруктураВалюты);
	КонецЦикла;
	ЗагрузитьВалютыНаСервере(Массив);
	ЗаполнитьНулевыеКурсы();
	ОбщегоНазначенияКлиент.СообщитьПользователю("Валюты загружены");	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНулевыеКурсы()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Валюты.Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Валюта.Установить(Выборка.Ссылка);
		НаборЗаписей.Прочитать();
		
		Курс				= 0;
		КурсВзаиморасчетов	= 0;
		КурсКЕвро			= 0;
		КурсКДоллару		= 0;	
		Для Каждого Запись Из НаборЗаписей Цикл
			Если Запись.Курс = 0 Тогда
				Запись.Курс = Курс;
			Иначе
				Курс = Запись.Курс;		
			КонецЕсли;
			
			Если Запись.КурсВзаиморасчетов = 0 Тогда
				Запись.КурсВзаиморасчетов = КурсВзаиморасчетов;
			Иначе
				КурсВзаиморасчетов = Запись.КурсВзаиморасчетов;		
			КонецЕсли;
				 
			Если Запись.КурсКЕвро = 0 Тогда
				Запись.КурсКЕвро = КурсКЕвро;
			Иначе
				КурсКЕвро = Запись.КурсКЕвро;		
			КонецЕсли;
				 
			Если Запись.КурсКДоллару = 0 Тогда
				Запись.КурсКДоллару = КурсКДоллару;
			Иначе
				КурсКДоллару = Запись.КурсКДоллару;		
			КонецЕсли;		
		КонецЦикла;	
		НаборЗаписей.Записать();
	КонецЦикла;	
КонецПроцедуры	

// Загрузить валюты на сервере.
// 
// Параметры:
//  МассивСтруктур - Массив из См. СтруктураВалюты()
&НаСервере
Процедура ЗагрузитьВалютыНаСервере(МассивСтруктур)
	
	Для Каждого Валюта Из МассивСтруктур Цикл
		ВалютаСсылка = Справочники.Валюты.НайтиПоРеквизиту("Идентификатор77", Валюта.ИД77);
		Если ЗначениеЗаполнено(ВалютаСсылка) Тогда
			ВалютаОбъект = ВалютаСсылка.ПолучитьОбъект();			
		Иначе
			ВалютаОбъект = Справочники.Валюты.СоздатьЭлемент();
			ВалютаОбъект.Идентификатор77 = Валюта.ИД77;
		КонецЕсли;
		ВалютаОбъект.Наименование = Валюта.Наименование;
		ВалютаОбъект.ОбменДанными.Загрузка = Истина;
		ВалютаОбъект.Записать();
		
		ТаблицаИстории = Новый ТаблицаЗначений();
		ТаблицаИстории.Колонки.Добавить("ДатаЗначения", Новый ОписаниеТипов("Дата"));
		ТаблицаИстории.Колонки.Добавить("Курс", Новый ОписаниеТипов("Число"));
		ТаблицаИстории.Колонки.Добавить("КурсВзаиморасчетов", Новый ОписаниеТипов("Число"));
		ТаблицаИстории.Колонки.Добавить("КурсКЕвро", Новый ОписаниеТипов("Число"));
		ТаблицаИстории.Колонки.Добавить("КурсКДоллару", Новый ОписаниеТипов("Число"));
		
		Для Каждого ЭлементИстории Из Валюта.ИсторияКурс Цикл
			НоваяСтрока = ТаблицаИстории.Добавить();
			НоваяСтрока.ДатаЗначения = ЭлементИстории.ДатаЗначения;
			НоваяСтрока.Курс = ЭлементИстории.Курс;
		КонецЦикла;
		Для Каждого ЭлементИстории Из Валюта.ИсторияКурсВзаиморасчетов Цикл
			НоваяСтрока = ТаблицаИстории.Добавить();
			НоваяСтрока.ДатаЗначения = ЭлементИстории.ДатаЗначения;
			НоваяСтрока.КурсВзаиморасчетов = ЭлементИстории.Курс;
		КонецЦикла;
		Для Каждого ЭлементИстории Из Валюта.ИсторияКурсКЕвро Цикл
			НоваяСтрока = ТаблицаИстории.Добавить();
			НоваяСтрока.ДатаЗначения = ЭлементИстории.ДатаЗначения;
			НоваяСтрока.КурсКЕвро = ЭлементИстории.Курс;
		КонецЦикла;
		Для Каждого ЭлементИстории Из Валюта.ИсторияКурсКДоллару Цикл
			НоваяСтрока = ТаблицаИстории.Добавить();
			НоваяСтрока.ДатаЗначения = ЭлементИстории.ДатаЗначения;
			НоваяСтрока.КурсКДоллару = ЭлементИстории.Курс;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаИстории", ТаблицаИстории);
		Запрос.Текст = "ВЫБРАТЬ
		|	ТаблицаИстории.ДатаЗначения,
		|	ТаблицаИстории.Курс,
		|	ТаблицаИстории.КурсВзаиморасчетов,
		|	ТаблицаИстории.КурсКЕвро,
		|	ТаблицаИстории.КурсКДоллару
		|ПОМЕСТИТЬ ВТ_История
		|ИЗ
		|	&ТаблицаИстории КАК ТаблицаИстории
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_История.ДатаЗначения,
		|	МАКСИМУМ(ВТ_История.Курс) КАК Курс,
		|	МАКСИМУМ(ВТ_История.КурсВзаиморасчетов) КАК КурсВзаиморасчетов,
		|	МАКСИМУМ(ВТ_История.КурсКЕвро) КАК КурсКЕвро,
		|	МАКСИМУМ(ВТ_История.КурсКДоллару) КАК КурсКДоллару
		|ПОМЕСТИТЬ ВТ_ИсторияГруппировка
		|ИЗ
		|	ВТ_История КАК ВТ_История
		|СГРУППИРОВАТЬ ПО
		|	ВТ_История.ДатаЗначения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ИсторияГруппировка.ДатаЗначения КАК ДатаЗначения,
		|	ВТ_ИсторияГруппировка.Курс КАК Курс,
		|	ВТ_ИсторияГруппировка.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	ВТ_ИсторияГруппировка.КурсКЕвро КАК КурсКЕвро,
		|	ВТ_ИсторияГруппировка.КурсКДоллару КАК КурсКДоллару
		|ИЗ
		|	ВТ_ИсторияГруппировка КАК ВТ_ИсторияГруппировка
		|ИТОГИ
		|	МАКСИМУМ(КурсКДоллару) КАК КурсКДоллару,
		|	МАКСИМУМ(КурсКЕвро) КАК КурсКЕвро,
		|	МАКСИМУМ(КурсВзаиморасчетов) КАК КурсВзаиморасчетов,
		|	МАКСИМУМ(Курс) КАК Курс
		|ПО
		|	ДатаЗначения";
		
		ВыборкаДатаЗначения = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ДатаЗначения");
		Пока ВыборкаДатаЗначения.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.КурсыВалют.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Валюта				= ВалютаОбъект.Ссылка;
			МенеджерЗаписи.Период				= ВыборкаДатаЗначения.ДатаЗначения;
			МенеджерЗаписи.Курс					= ВыборкаДатаЗначения.Курс; 
			МенеджерЗаписи.КурсВзаиморасчетов	= ВыборкаДатаЗначения.КурсВзаиморасчетов;
			МенеджерЗаписи.КурсКЕвро			= ВыборкаДатаЗначения.КурсКЕвро;
			МенеджерЗаписи.КурсКДоллару			= ВыборкаДатаЗначения.КурсКДоллару;
			МенеджерЗаписи.Записать(); 
		КонецЦикла;		
	КонецЦикла;	 
	
КонецПроцедуры	

// Структура валюты.
// 
// Возвращаемое значение:
//  Структура - Структура валюты:
// * Наименование - Строка - 
// * ИД77 - Строка - 
// * ИсторияКурс - Массив из См. СтруктураИсторииКурса() 
// * ИсторияКурсВзаиморасчетов - Массив из См. СтруктураИсторииКурса()  
// * ИсторияКурсКЕвро - Массив из См. СтруктураИсторииКурса()  
// * ИсторияКурсКДоллару - Массив из См. СтруктураИсторииКурса()  
&НаКлиенте
Функция СтруктураВалюты()
	Структура = Новый Структура();
	Структура.Вставить("Наименование", "");
	Структура.Вставить("ИД77", "");
	Структура.Вставить("ИсторияКурс", Новый Массив);
	Структура.Вставить("ИсторияКурсВзаиморасчетов", Новый Массив);
	Структура.Вставить("ИсторияКурсКЕвро", Новый Массив);
	Структура.Вставить("ИсторияКурсКДоллару", Новый Массив);
	
	Возврат Структура;	
КонецФункции

// Структура истории курса.
// 
// Возвращаемое значение:
//  Структура - Структура истории курса:
// * ДатаЗначения - Дата - 
// * Курс - Число - 
&НаКлиенте
Функция СтруктураИсторииКурса()
	Структура = Новый Структура();
	Структура.Вставить("ДатаЗначения", Дата(1, 1, 1));
	Структура.Вставить("Курс", 0);
	
	Возврат Структура;
КонецФункции

#КонецОбласти

#Область УсловияСкидок

&НаКлиенте
Процедура ЗагрузкаУсловийСкидокНаЗаправках(Команда)
	СправочникМестаТранзакций = Сервер77.CreateObject("Справочник.МестоТранзакции");
	СправочникМестаТранзакций.ВыбратьЭлементы();
	
	СправочникУсловияСкидок = Сервер77.CreateObject("Справочник.УсловияСкидокНаЗаправках");
	
	МассивСтруктур = Новый Массив;

	Периодический77 = Сервер77.CreateObject("Периодический");
	
	Счетчик = 0;
	Пока СправочникМестаТранзакций.ПолучитьЭлемент() = 1 Цикл
		Счетчик = Счетчик + 1;
		ТекущееМестоТранзакции = СправочникМестаТранзакций.ТекущийЭлемент();
		
		СправочникУсловияСкидок.ИспользоватьВладельца(ТекущееМестоТранзакции);
		СправочникУсловияСкидок.ВыбратьЭлементы();
		Пока СправочникУсловияСкидок.ПолучитьЭлемент() = 1 Цикл
			ТекущиеУсловияСкидок = СправочникУсловияСкидок.ТекущийЭлемент();
			Владелец77 = ТекущиеУсловияСкидок.Владелец;
			
			СтруктураУсловияСкидок = СтруктураУсловияСкидок();
			СтруктураУсловияСкидок.Владелец77 = Сервер77.ЗначениеВСтрокуВнутр(Владелец77);
			СтруктураУсловияСкидок.ИД77 =  Сервер77.ЗначениеВСтрокуВнутр(ТекущиеУсловияСкидок);
			СтруктураУсловияСкидок.Контрагент77 = Сервер77.ЗначениеВСтрокуВнутр(ТекущиеУсловияСкидок.Клиент);
			СтруктураУсловияСкидок.Наименование = ТекущиеУсловияСкидок.Наименование;
			
			Периодический77.ИспользоватьОбъект("Скидка", ТекущиеУсловияСкидок);
			Периодический77.ВыбратьЗначения();
			Пока Периодический77.ПолучитьЗначение() = 1 Цикл
				ЗначениеИстории = СтруктураИсторииСкидкиНаЗаправках();
				ЗначениеИстории.ДатаЗначения = Периодический77.ДатаЗнач;
				ЗначениеИстории.Скидка = Периодический77.Значение;
				
				СтруктураУсловияСкидок.ИсторияУсловияСкидок.Добавить(ЗначениеИстории); 
			КонецЦикла;
				
			МассивСтруктур.Добавить(СтруктураУсловияСкидок);	
		КонецЦикла;	
	КонецЦикла;
	ЗагрузитьУсловияСкидокНаСервере(МассивСтруктур);
КонецПроцедуры

// Загрузить условия скидок на сервере.
// 
// Параметры:
//  МассивСтруктур - Массив из См.СтруктураУсловияСкидок 
&НаСервере
Процедура ЗагрузитьУсловияСкидокНаСервере(МассивСтруктур)
	Для Каждого УсловиеСкидокНаЗаправке Из МассивСтруктур Цикл
		УсловиеСкидокСсылка = Справочники.УсловияСкидокНаЗаправках.НайтиПоРеквизиту("Идентификатор77", УсловиеСкидокНаЗаправке.ИД77);
		Если ЗначениеЗаполнено(УсловиеСкидокСсылка) Тогда
			УсловиеСкидокОбъект = УсловиеСкидокСсылка.ПолучитьОбъект();
		Иначе
			УсловиеСкидокОбъект = Справочники.УсловияСкидокНаЗаправках.СоздатьЭлемент();
			УсловиеСкидокОбъект.Идентификатор77 = УсловиеСкидокНаЗаправке.ИД77;
		КонецЕсли;
		УсловиеСкидокОбъект.Владелец = Справочники.МестаТранзакции.НайтиПоРеквизиту("Идентификатор77", УсловиеСкидокНаЗаправке.Владелец77);
		УсловиеСкидокОбъект.Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("Идентификатор77", УсловиеСкидокНаЗаправке.Контрагент77);
		УсловиеСкидокОбъект.Записать();
		
		Для Каждого ЗаписьИстории Из УсловиеСкидокНаЗаправке.ИсторияУсловияСкидок Цикл
			МенеджерЗаписи = РегистрыСведений.УсловияСкидокНаЗаправкахИстория.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.УсловияСкидок = УсловиеСкидокОбъект.Ссылка;
			МенеджерЗаписи.Период = ЗаписьИстории.ДатаЗначения;
			МенеджерЗаписи.Скидка = ЗаписьИстории.Скидка;
			МенеджерЗаписи.Записать();
		КонецЦикла;	 
	КонецЦикла;	
КонецПроцедуры	

// Структура условия скидок.
// 
// Возвращаемое значение:
//  Структура - Структура условия скидок:
// * Владелец77 - Строка - 
// * ИД77 - Строка - 
// * Контрагент77 - Строка - 
// * Наименование - Строка - 
// * ИсторияУсловияСкидок - Массив из См. СтруктураИсторииСкидкиНаЗаправках() 
&НаКлиенте
Функция СтруктураУсловияСкидок()
	Структура = Новый Структура();
	Структура.Вставить("Владелец77", "");
	Структура.Вставить("ИД77", "");
	Структура.Вставить("Контрагент77", "");
	Структура.Вставить("Наименование", "");
	Структура.Вставить("ИсторияУсловияСкидок", Новый Массив);
	
	Возврат Структура;
КонецФункции

// Структура истории скидки на заправках.
// 
// Возвращаемое значение:
//  Структура - Структура истории скидки на заправках:
// * ДатаЗначения - Дата - 
// * Скидка - Число - 
&НаКлиенте
Функция СтруктураИсторииСкидкиНаЗаправках()
	Структура = Новый Структура();
	Структура.Вставить("ДатаЗначения", Дата(1, 1, 1));
	Структура.Вставить("Скидка", 0);
	
	Возврат Структура;
КонецФункции		

#КонецОбласти

#Область Фактура

// Структура фактура.
// 
// Возвращаемое значение:
//  Структура - Структура фактура:
// * ДатаДокумента - Дата - 
// * Идентификатор77 - Строка - 
// * Поставщик - Строка -
// * ПоследнийНомерПечати - Строка - 
// * МетодРасчетаСкидки - Число - 
// * СуммаЗаДороги - Число - 
// * КурсЗаДороги - Число - 
// * МассивСтрок - Массив - См. СтруктураСтрокиФактура() 
Функция СтруктураФактура()
	Структура = Новый Структура;
	Структура.Вставить("ДатаДокумента", Дата(1, 1, 1));
	Структура.Вставить("Поставщик", "");
	Структура.Вставить("Идентификатор77", "");
	Структура.Вставить("ПоследнийНомерПечати", "");
	Структура.Вставить("МетодРасчетаСкидки", 0);
	Структура.Вставить("СуммаЗаДороги", 0);
	Структура.Вставить("КурсЗаДороги", 0);
	Структура.Вставить("МассивСтрок", Новый Массив);
	
	Возврат Структура;
КонецФункции

// Структура строки фактура.
// 
// Возвращаемое значение:
//  Структура - Структура строки фактура:
// * ДатаТранзакции - Дата - 
// * Карта - СправочникСсылка.Карточки - 
// * Клиент - СправочникСсылка.Контрагенты - 
// * Автомобиль - СправочникСсылка.Автомобили - 
// * МестоТранзакции - СправочникСсылка.МестаТранзакции - 
// * Продукт - СправочникСсылка.Номенклатура - 
// * Количество - Число - 
// * Цена - Число - 
// * Сумма - Число - 
// * Скидка - Число - 
// * ЦенаСоСкидкой - Число - 
// * СуммаСкидки - Число - 
// * Итого - Число - 
// * ВалютнаяЦена - Число - 
// * Надбавка - Число - 
// * ВалютнаяЦенаСНадбавкой - Число - 
// * Валюта - Строка - 
// * ДокументОснование - ДокументСсылка.ФактураШаблон - 
// * Поставщик - СправочникСсылка.Контрагенты - 
// * ЭтапОплаты - Число - 
// * ВалютаПоставщика - СправочникСсылка.Валюты - 
// * ФлагНеУчитывать - Булево - 
Функция СтруктураСтрокиФактура()
	Структура = Новый Структура();

	Структура.Вставить("ДатаТранзакции", Дата(1, 1, 1));
	Структура.Вставить("Карта", Справочники.Карточки.ПустаяСсылка());
	Структура.Вставить("Клиент", Справочники.Контрагенты.ПустаяСсылка()); 
	Структура.Вставить("Автомобиль", Справочники.Автомобили.ПустаяСсылка());
	Структура.Вставить("МестоТранзакции", Справочники.МестаТранзакции.ПустаяСсылка());
	Структура.Вставить("Продукт", Справочники.Номенклатура.ПустаяСсылка());
	Структура.Вставить("Количество", 0);
	Структура.Вставить("Цена", 0);
	Структура.Вставить("Сумма", 0);
	Структура.Вставить("Скидка", 0);
	Структура.Вставить("ЦенаСоСкидкой", 0);
	Структура.Вставить("СуммаСкидки", 0);
	Структура.Вставить("Итого", 0);
	Структура.Вставить("ВалютнаяЦена", 0);
	Структура.Вставить("Надбавка", 0);
	Структура.Вставить("ВалютнаяЦенаСНадбавкой", 0);
	Структура.Вставить("Валюта", "");
	Структура.Вставить("ДокументОснование", Документы.ФактураШаблон.ПустаяСсылка());
	Структура.Вставить("Поставщик", Справочники.Контрагенты.ПустаяСсылка());
	Структура.Вставить("ЭтапОплаты", 0);
	Структура.Вставить("ВалютаПоставщика", Справочники.Валюты.ПустаяСсылка());
	Структура.Вставить("ФлагНеУчитывать", Ложь);
	
	Возврат Структура;	
КонецФункции	

&НаКлиенте
Процедура ЗагрузкаФактурНаКлиенте()
	Массив = Новый Массив;
	
	НачалоПериода = НачалоМесяца(ОбрабатываемыйПериод);
	КонецПериода = КонецМесяца(ОбрабатываемыйПериод);
	
	ДокументФактура = Сервер77.CreateObject("Документ.Фактура");
	ДокументФактура.ВыбратьДокументы(НачалоПериода, КонецПериода);
	
	СоответствиеИДФактураШаблонов = ПолучитьСоответствиеИДФактураШаблон();
	СоответствиеИДКарт = ПолучитьСоответствиеИДСправочника("Карточки");
	СоответствиеИДКонтрагент = ПолучитьСоответствиеИДСправочника("Контрагенты");
	СоответствиеИДАвтомобиль = ПолучитьСоответствиеИДСправочника("Автомобили");
	СоответствиеИДТранзакции = ПолучитьСоответствиеИДСправочника("МестаТранзакции");
	СоответствиеИДПродукт	= ПолучитьСоответствиеИДСправочника("Номенклатура");  
	СоответствиеИДВалюта	= ПолучитьСоответствиеИДСправочника("Валюты");
		
	Пока ДокументФактура.ПолучитьДокумент() = 1 Цикл
		Если ДокументФактура.Проведен() <> 1 Тогда
			Продолжить;
		КонецЕсли;	
		СтруктураФактура = СтруктураФактура();
		СтруктураФактура.ДатаДокумента			= ДокументФактура.ДатаДок;
		СтруктураФактура.Поставщик				= Сервер77.ЗначениеВСтрокуВнутр(ДокументФактура.Фирма);
		СтруктураФактура.Идентификатор77		= Сервер77.ЗначениеВСтрокуВнутр(ДокументФактура.ТекущийДокумент()); 
		СтруктураФактура.ПоследнийНомерПечати	= ДокументФактура.ПослНомерПечати;
		СтруктураФактура.МетодРасчетаСкидки		= ДокументФактура.МетодРасчетаСкидки;
		СтруктураФактура.СуммаЗаДороги			= ДокументФактура.СуммаЗаДороги;
		СтруктураФактура.КурсЗаДороги			= ДокументФактура.КурсЗаДороги;		
		
		ДокументФактура.ВыбратьСтроки();
		Пока ДокументФактура.ПолучитьСтроку() = 1 Цикл
			ИДШаблонаФактура = Сервер77.ЗначениеВСтрокуВнутр(ДокументФактура.Исходник);
			ИДКарта = Сервер77.ЗначениеВСтрокуВнутр(ДокументФактура.Карта);
			ИДКлиент = Сервер77.ЗначениеВСтрокуВнутр(ДокументФактура.Клиент);
			ИДАвтомобиль = Сервер77.ЗначениеВСтрокуВнутр(ДокументФактура.Автомобиль);
			ИДМестоТранзакции = Сервер77.ЗначениеВСтрокуВнутр(ДокументФактура.МестоТранзакции);
			ИДПродукт = Сервер77.ЗначениеВСтрокуВнутр(ДокументФактура.Продукт);
			ИДВалюта = Сервер77.ЗначениеВСтрокуВнутр(ДокументФактура.Валюта);
			ИДПоставщик = Сервер77.ЗначениеВСтрокуВнутр(ДокументФактура.Поставщик);
			ИДВалютаПоставщика = Сервер77.ЗначениеВСтрокуВнутр(ДокументФактура.ВалютаПоставщика);
			
			СтруктураСтроки = СтруктураСтрокиФактура();
			СтруктураСтроки.ДатаТранзакции = ДокументФактура.ДатаТ;
			СтруктураСтроки.Карта = СоответствиеИДКарт.Получить(ИДКарта);
			СтруктураСтроки.Клиент = СоответствиеИДКонтрагент.Получить(ИДКлиент);
			СтруктураСтроки.Автомобиль = СоответствиеИДАвтомобиль.Получить(ИДАвтомобиль);
			СтруктураСтроки.МестоТранзакции = СоответствиеИДТранзакции.Получить(ИДМестоТранзакции);
			СтруктураСтроки.Продукт = СоответствиеИДПродукт.Получить(ИДПродукт);
			СтруктураСтроки.Количество = ДокументФактура.Количество;
			СтруктураСтроки.Цена = ДокументФактура.Цена;
			СтруктураСтроки.Сумма = ДокументФактура.Сумма;
			СтруктураСтроки.Скидка = ДокументФактура.Скидка;
			СтруктураСтроки.ЦенаСоСкидкой = ДокументФактура.ЦенаСоСкидкой;
			СтруктураСтроки.СуммаСкидки = ДокументФактура.СкидкаЗн;
			СтруктураСтроки.Итого = ДокументФактура.Итого;
			СтруктураСтроки.ВалютнаяЦена = ДокументФактура.ЦенаВал;
			СтруктураСтроки.Надбавка = ДокументФактура.Надбавка;
			СтруктураСтроки.ВалютнаяЦенаСНадбавкой = ДокументФактура.ЦенаВалНадбавка; 
			СтруктураСтроки.Валюта = СоответствиеИДВалюта.Получить(ИДВалюта);
			СтруктураСтроки.ДокументОснование = СоответствиеИДФактураШаблонов.Получить(ИДШаблонаФактура);
			СтруктураСтроки.Поставщик = СоответствиеИДКонтрагент.Получить(ИДПоставщик);
			СтруктураСтроки.ЭтапОплаты = ДокументФактура.ЭтапОплаты;
			СтруктураСтроки.ВалютаПоставщика = СоответствиеИДВалюта.Получить(ИДВалютаПоставщика);
			Если ДокументФактура.флНеУчитывать = 1 Тогда
				СтруктураСтроки.ФлагНеУчитывать = Истина;
			КонецЕсли;		
			
			СтруктураФактура.МассивСтрок.Добавить(СтруктураСтроки);
		КонецЦикла;
		Массив.Добавить(СтруктураФактура);  
	КонецЦикла;
	ЗагрузитьФактуры(Массив);
КонецПроцедуры

// Загрузить фактуры.
// 
// Параметры:
//  МассивСтруктур - Массив из См.СтруктураФактура
&НаСервере
Процедура ЗагрузитьФактуры(МассивСтруктур)
	Для Каждого Фактура Из МассивСтруктур Цикл
		ФактураСсылка = Документы.Фактура.НайтиПоРеквизиту("Идентификатор77", Фактура.Идентификатор77);
		Если ЗначениеЗаполнено(ФактураСсылка) Тогда
			ФактураОбъект = ФактураСсылка.ПолучитьОбъект();
		Иначе
			ФактураОбъект = Документы.Фактура.СоздатьДокумент();
			ФактураОбъект.Идентификатор77 = Фактура.Идентификатор77;
		КонецЕсли;
		ФактураОбъект.Дата = Фактура.ДатаДокумента;
		ФактураОбъект.Поставщик = Справочники.Контрагенты.НайтиПоРеквизиту("Идентификатор77", Фактура.Поставщик);
		ФактураОбъект.ПоследнийНомерПечати = Фактура.ПоследнийНомерПечати;
		ФактураОбъект.МетодРасчетаСкидки = Фактура.МетодРасчетаСкидки;
		ФактураОбъект.СуммаЗаДороги = Фактура.СуммаЗаДороги;
		ФактураОбъект.КурсЗаДороги = Фактура.КурсЗаДороги;		
		
		ФактураОбъект.Транзакции.Очистить();
		Для Каждого СтрокаТЧ Из Фактура.МассивСтрок Цикл
			НоваяСтрока = ФактураОбъект.Транзакции.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		КонецЦикла;
		ФактураОбъект.Записать(РежимЗаписиДокумента.Проведение);		
	КонецЦикла;			
КонецПроцедуры	

// Получить соответствие ИДФактура шаблон.
// 
// Возвращаемое значение:
//  Соответствие
&НаСервереБезКонтекста
Функция ПолучитьСоответствиеИДФактураШаблон()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФактураШаблон.Идентификатор77,
	|	ФактураШаблон.Ссылка
	|ИЗ
	|	Документ.ФактураШаблон КАК ФактураШаблон";
	
	Соответствие = Новый Соответствие();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.Идентификатор77, Выборка.Ссылка);
	КонецЦикла;
		
	Возврат Соответствие;	
	
КонецФункции

// Получить соответствие ИДСправочника.
// 
// Параметры:
//  ИмяСправочника - Строка - Имя справочника
// 
// Возвращаемое значение:
//  Соответствие - Получить соответствие ИДСправочника
&НаСервереБезКонтекста
Функция ПолучитьСоответствиеИДСправочника(ИмяСправочника)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Идентификатор77,
	|	Таблица.Ссылка
	|ИЗ
	|	Справочник.ИмяСправочника КАК Таблица";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяСправочника", ИмяСправочника);
	
	Соответствие = Новый Соответствие();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.Идентификатор77, Выборка.Ссылка);
	КонецЦикла;
		
	Возврат Соответствие;	
	
КонецФункции	

&НаКлиенте
Процедура ЗагрузкаФактур(Команда)
	НачалоПериода = Объект.ПериодВыборкиДокументов.ДатаНачала;
	КонецПериода = КонецДня(Объект.ПериодВыборкиДокументов.ДатаОкончания);
	
	ТекущийПериод = НачалоПериода;
	Пока ТекущийПериод < КонецПериода Цикл
		ОбрабатываемыйПериод = ТекущийПериод;
		ТекстСообщения = СтрШаблон("Обрабатываемый период:%1", ОбрабатываемыйПериод);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ЗаписатьЛог(ТекстСообщения, "Загрузка фактур");
		
		ЗагрузкаФактурНаКлиенте();
		
		ТекущийПериод = КонецМесяца(ТекущийПериод) + 1;	
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ФактураШаблон

&НаКлиенте
Процедура ЗагрузкаФактурШаблонНаКлиенте()
	Массив = Новый Массив;
	
	НачалоПериода = НачалоМесяца(ОбрабатываемыйПериод);
	КонецПериода = КонецМесяца(ОбрабатываемыйПериод);
	
	ДокументФактураШаблон77 = Сервер77.CreateObject("Документ.ФактураШаблон");
	ДокументФактураШаблон77.ВыбратьДокументы(НачалоПериода, КонецПериода);	
	
	Пока ДокументФактураШаблон77.ПолучитьДокумент() = 1 Цикл
		Если ДокументФактураШаблон77.Проведен() <> 1 Тогда
			Продолжить;
		КонецЕсли;	
		СтруктураФактураШаблон = СтруктураФактураШаблон();
		СтруктураФактураШаблон.ДатаДокумента		= ДокументФактураШаблон77.ДатаДок;
		СтруктураФактураШаблон.ИД77					= Сервер77.ЗначениеВСтрокуВнутр(ДокументФактураШаблон77.ТекущийДокумент()); 
		СтруктураФактураШаблон.ИД77ВалютаПоставщика = Сервер77.ЗначениеВСтрокуВнутр(ДокументФактураШаблон77.ВалютаПоставщика);
		СтруктураФактураШаблон.ИД77ПапкаЗаправок	= Сервер77.ЗначениеВСтрокуВнутр(ДокументФактураШаблон77.ПапкаЗаправок);
		СтруктураФактураШаблон.ИД77Поставщик		= Сервер77.ЗначениеВСтрокуВнутр(ДокументФактураШаблон77.Поставщик);
		
		ДокументФактураШаблон77.ВыбратьСтроки();
		Пока ДокументФактураШаблон77.ПолучитьСтроку() = 1 Цикл
			СтруктураСтроки = СтруктураСтрокиФактураШаблон();
			СтруктураСтроки.ДатаТранзакции	= ДокументФактураШаблон77.ДатаТ;
			СтруктураСтроки.Карта			= Сервер77.ЗначениеВСтрокуВнутр(ДокументФактураШаблон77.Карта);
			СтруктураСтроки.Клиент			= Сервер77.ЗначениеВСтрокуВнутр(ДокументФактураШаблон77.Клиент);
			СтруктураСтроки.Автомобиль		= ДокументФактураШаблон77.Автомобиль;
			СтруктураСтроки.МестоТранзакции = Сервер77.ЗначениеВСтрокуВнутр(ДокументФактураШаблон77.МестоТранзакции);
			СтруктураСтроки.Продукт			= Сервер77.ЗначениеВСтрокуВнутр(ДокументФактураШаблон77.Продукт);
			СтруктураСтроки.Количество		= ДокументФактураШаблон77.Количество;
			СтруктураСтроки.Цена			= ДокументФактураШаблон77.Цена;
			СтруктураСтроки.Сумма			= ДокументФактураШаблон77.Сумма;
			СтруктураСтроки.Валюта			= Сервер77.ЗначениеВСтрокуВнутр(ДокументФактураШаблон77.Валюта);
			СтруктураСтроки.ДатаТекст		= ДокументФактураШаблон77.ДатаТекст;
			
			СтруктураФактураШаблон.МассивСтрок.Добавить(СтруктураСтроки);
		КонецЦикла;
		Массив.Добавить(СтруктураФактураШаблон);  
	КонецЦикла;
	ЗагрузитьФактурыШаблон(Массив);
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗагрузкаФактурШаблон(Команда)	
	
	НачалоПериода = Объект.ПериодВыборкиДокументов.ДатаНачала;
	КонецПериода = КонецДня(Объект.ПериодВыборкиДокументов.ДатаОкончания);
	
	ТекущийПериод = НачалоПериода;
	Пока ТекущийПериод < КонецПериода Цикл
		ОбрабатываемыйПериод = ТекущийПериод;
		ТекстСообщения = СтрШаблон("Обрабатываемый период:%1", ОбрабатываемыйПериод);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ЗаписатьЛог(ТекстСообщения, "Загрузка счетов фактур");
		
		ЗагрузкаФактурШаблонНаКлиенте();
		
		ТекущийПериод = КонецМесяца(ТекущийПериод) + 1;	
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЛог(ТекстСообщения, ИДСобытия)
	ЗаписьЖурналаРегистрации(ИДСобытия, УровеньЖурналаРегистрации.Информация, , , ТекстСообщения);
КонецПроцедуры

// Загрузить фактуры шаблон.
// 
// Параметры:
//  МассивСтруктур - Массив из См. СтруктураФактураШаблон()
&НаСервере
Процедура ЗагрузитьФактурыШаблон(МассивСтруктур)
	Для Каждого ФактураШаблон Из МассивСтруктур Цикл
		ФактураШаблонСсылка = Документы.ФактураШаблон.НайтиПоРеквизиту("Идентификатор77", ФактураШаблон.ИД77);
		Если ЗначениеЗаполнено(ФактураШаблонСсылка) Тогда
			ФактураШаблонОбъект = ФактураШаблонСсылка.ПолучитьОбъект();
		Иначе
			ФактураШаблонОбъект = Документы.ФактураШаблон.СоздатьДокумент();
			ФактураШаблонОбъект.Идентификатор77 = ФактураШаблон.ИД77;
		КонецЕсли;
		ФактураШаблонОбъект.Дата = ФактураШаблон.ДатаДокумента;
		ФактураШаблонОбъект.Поставщик = Справочники.Контрагенты.НайтиПоРеквизиту("Идентификатор77", ФактураШаблон.ИД77Поставщик);
		ФактураШаблонОбъект.ВалютаПоставщика = Справочники.Валюты.НайтиПоРеквизиту("Идентификатор77", ФактураШаблон.ИД77ВалютаПоставщика);
		ФактураШаблонОбъект.ПапкаЗаправок = Справочники.МестаТранзакции.НайтиПоРеквизиту("Идентификатор77", ФактураШаблон.ИД77ПапкаЗаправок);
				
		ФактураШаблонОбъект.Транзакции.Очистить();
		Для Каждого СтрокаТЧ Из ФактураШаблон.МассивСтрок Цикл
			НоваяСтрока = ФактураШаблонОбъект.Транзакции.Добавить();
			НоваяСтрока.ДатаТранзакции = СтрокаТЧ.ДатаТранзакции;
			НоваяСтрока.Карта = Справочники.Карточки.НайтиПоРеквизиту("Идентификатор77", СтрокаТЧ.Карта);
			НоваяСтрока.Клиент = Справочники.Контрагенты.НайтиПоРеквизиту("Идентификатор77", СтрокаТЧ.Клиент);
			НоваяСтрока.Автомобиль = СтрокаТЧ.Автомобиль;
			НоваяСтрока.МестоТранзакции = Справочники.МестаТранзакции.НайтиПоРеквизиту("Идентификатор77", СтрокаТЧ.МестоТранзакции);
			НоваяСтрока.Продукт = Справочники.Номенклатура.НайтиПоРеквизиту("Идентификатор77", СтрокаТЧ.Продукт);
			НоваяСтрока.Количество = СтрокаТЧ.Количество;
			НоваяСтрока.Цена = СтрокаТЧ.Цена;
			НоваяСтрока.Сумма = СтрокаТЧ.Сумма;
			НоваяСтрока.Валюта = Справочники.Валюты.НайтиПоРеквизиту("Идентификатор77", СтрокаТЧ.Валюта);
			НоваяСтрока.ДатаТекст = СтрокаТЧ.ДатаТекст;
		КонецЦикла;
		ФактураШаблонОбъект.Записать(РежимЗаписиДокумента.Проведение);		
	КонецЦикла;			
КонецПроцедуры	

// Структура фактура шаблон.
// 
// Возвращаемое значение:
//  Структура - Структура фактура шаблон:
// * ДатаДокумента - Дата - 
// * ИД77 - Строка - 
// * ИД77Поставщик - Строка - 
// * ИД77ВалютаПоставщика - Строка - 
// * ИД77ПапкаЗаправок - Строка - 
// * МассивСтрок - Массив из См. СтруктураСтрокиФактураШаблон()
&НаКлиенте
Функция СтруктураФактураШаблон()
	Структура = Новый Структура;
	Структура.Вставить("ДатаДокумента", Дата(1, 1, 1));
	Структура.Вставить("ИД77", "");
	Структура.Вставить("ИД77Поставщик", "");
	Структура.Вставить("ИД77ВалютаПоставщика", "");
	Структура.Вставить("ИД77ПапкаЗаправок", "");
	Структура.Вставить("МассивСтрок", Новый Массив);
	
	Возврат Структура;
КонецФункции

// Структура строки фактура шаблон.
// 
// Возвращаемое значение:
//  Структура - Структура строки фактура шаблон:
// * ДатаТранзакции - Дата - 
// * Карта - Строка - 
// * Клиент - Строка - 
// * Автомобиль - Строка - 
// * МестоТранзакции - Строка - 
// * Продукт - Строка - 
// * Количество - Число - 
// * Цена - Число - 
// * Сумма - Число - 
// * Валюта - Строка - 
// * ДатаТекст - Строка - 
&НаКлиенте
Функция СтруктураСтрокиФактураШаблон()
	Структура = Новый Структура();
	Структура.Вставить("ДатаТранзакции", Дата(1, 1, 1));
	Структура.Вставить("Карта", "");
	Структура.Вставить("Клиент", "");
	Структура.Вставить("Автомобиль", "");
	Структура.Вставить("МестоТранзакции", "");
	Структура.Вставить("Продукт", "");
	Структура.Вставить("Количество", 0);
	Структура.Вставить("Цена", 0);
	Структура.Вставить("Сумма", 0);
	Структура.Вставить("Валюта", "");
	Структура.Вставить("ДатаТекст", "");
	
	Возврат Структура;	
КонецФункции	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗагрузитьВсе(Команда)
	ЗагрузкаНоменклатуры(Неопределено);
	ЗагрузкаСкидок(Неопределено);
	ЗагрузкаМестТранзакции(Неопределено);	
	ЗагрузкаКонтрагентов(Неопределено);
	ЗагрузкаАвтомобилей(Неопределено);
	ЗагрузкаКарточек(Неопределено);
	ЗагрузкаВалют(Неопределено);
	ЗагрузкаУсловийСкидокНаЗаправках(Неопределено);
КонецПроцедуры

#КонецОбласти
